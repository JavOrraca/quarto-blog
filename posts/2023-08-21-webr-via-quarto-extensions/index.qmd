---
title: "webR via Quarto Extensions"
description: "webR has been on my mind recently... With the recent release of webR 0.2.0, it's time to dive in!"
date: 08-21-2023
categories: [tidyverse, webR]
image: images/webR.png
engine: knitr
webr: 
  show-startup-message: false
  show-header-message: false
  home-dir: '/Users/javierorraca/Documents/GitHub/quarto-blog/'
  packages: ['ggplot2', 'dplyr']
filter:
  - webr
draft: true
---

# WebAssembly

Imagine you've written a program in R. It's simple and does exactly what you want but now, you wish to make it available for many people on the web, allowing them to run it within their web browsers. The challenge is that web browsers don't natively understand R code.

Traditionally, web browsers understand JavaScript as the primary language to run any dynamic operations. If you wanted to run code in a browser, you'd need to rewrite it in JavaScript. Re-writing code for every language to JavaScript is tedious and not efficient. This is where [WebAssembly](https://webassembly.org/) (or "wasm") comes into play.

WebAssembly introduces a new type of code that can be run in modern web browsers. It is designed as a low-level virtual machine that runs code at near-native speed. What's fascinating about WebAssembly is that it isnâ€™t written by hand; instead, other languages (like C, C++, Rust, Python, R, and more) can be compiled to WebAssembly.

In essence, WebAssembly allows you to take code from languages other than JavaScript, compile it into a format that the browser can understand, and then run it efficiently.

# webR

Compiling R to wasm was hypothetical even just a few years ago but is now possible via [webR](https://docs.r-wasm.org/webr/latest/). Being able to run R functions within a web browser without the need for an R interpreter on the user's end feels game changing.

> Being able to run R functions within a web browser without the need for an R interpreter on the user's end feels game changing.

webR is enabling R developers to bring their applications, algorithms, and visualizations to broader audiences via the web. R + wasm is definitely in the early stages of development and new use cases are being released daily by the data science and web development communities. For now, I'm just enjoying learning the basics and thinking about potential use cases.

# Demo

For the examples below, I'm running webR via a Quarto extension. I'm following James Balamuta's documentation on GitHub to learn how to use his [webR Code Extension for Quarto](https://github.com/coatless/quarto-webr) before I dive deeper into the internals of webR. I'm basically using a plug-and-play implementation of webR for Quarto ðŸš€. My goal is to start here but eventually dive deeper into the core webR package and framework.

This is a webr-enabled code cell in a Quarto HTML document.

```{webr-r}
fit = lm(mpg ~ am, data = mtcars)
summary(fit)
```
