<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Data Science Bytes</title>
<link>https://www.javierorracadeatcu.com/blog.html</link>
<atom:link href="https://www.javierorracadeatcu.com/blog.xml" rel="self" type="application/rss+xml"/>
<description>Javier Orraca-Deatcu&#39;s data science website built with R and Quarto</description>
<generator>quarto-1.2.280</generator>
<lastBuildDate>Sun, 15 Jan 2023 08:00:00 GMT</lastBuildDate>
<item>
  <title>R Goodies for 2023</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/2023-01-15-r-goodies-for-2023.html</link>
  <description><![CDATA[ 



<section id="overview" class="level1">
<h1>Overview</h1>
<p>Data science had an awesome year in 2022. The list below highlights some of my favorites that I hope you test drive in 2023 (<em>if you haven’t already!</em>). Happy belated New Year folks!</p>
</section>
<section id="probably" class="level1">
<h1>1. Probably</h1>
<p>The <a href="https://probably.tidymodels.org/index.html">probably</a> package, developed by Max Kuhn and Davis Vaughan at Posit, is in early stages of development and presents a new (at least, new to me) approach to assigning more realistic discrete class predictions. One initial question you might have is <em>Where exactly should I use <strong>probably</strong> in a modeling pipeline?</em> - <a href="https://probably.tidymodels.org/articles/where-to-use.html">Davis Vaughan addresses this in detail</a> and developed {probably} as a “post processing step <em>after</em> the model has been fit, but <em>before</em> the model performance has been calculated.”</p>
<p>This package helps programmatically identify a more appropriate threshold / cutoff for class predictions using <a href="https://en.wikipedia.org/wiki/Youden%27s_J_statistic">Youden’s J statistic</a> (or “J-index”). The statistic is implemented in the {yardstick} package and can be accessed via <a href="https://yardstick.tidymodels.org/reference/j_index.html"><code>yardstick::j_index()</code></a>. So, what’s with the J statistic?</p>
<ul>
<li>J = sensitivity + specificity - 1</li>
<li>The maximum value of J is 1 when there are no false positives and no false negatives</li>
<li>This technique comes in handy when a threshold of 50% (or 0.5) may not be the most appropriate for assigning a binary classification, especially when class imbalances exist.</li>
</ul>
<p>Let’s create a basic tidymodels workflow to fit Lending Club loan data to a logistic regression and predict whether a loan is good or bad. The code below was pulled directly from the source example written by Davis Vaughan:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r code-overflow-scroll number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(parsnip)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(probably)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(rsample)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">data</span>(<span class="st" style="color: #20794D;">"lending_club"</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">lending_club_modified <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb1-10">  lending_club <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-11">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">Class =</span> <span class="fu" style="color: #4758AB;">relevel</span>(Class, <span class="st" style="color: #20794D;">"good"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-12">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(Class, annual_inc, verification_status, sub_grade)</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">123</span>)</span>
<span id="cb1-15">split <span class="ot" style="color: #003B4F;">&lt;-</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">initial_split</span>(lending_club_modified)</span>
<span id="cb1-16">lending_train <span class="ot" style="color: #003B4F;">&lt;-</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">training</span>(split)</span>
<span id="cb1-17">lending_test  <span class="ot" style="color: #003B4F;">&lt;-</span> rsample<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">testing</span>(split)</span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;"># Note: 7,008 records are "good" loans and 384 are "bad"</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">logi_reg_fit <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb1-22">  parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">logistic_reg</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-23">  parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glm"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-24">  parsnip<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fit</span>(<span class="at" style="color: #657422;">formula =</span> Class <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> lending_train)</span>
<span id="cb1-25"></span>
<span id="cb1-26">predictions <span class="ot" style="color: #003B4F;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bind_cols</span>(</span>
<span id="cb1-27">  lending_test,</span>
<span id="cb1-28">  <span class="fu" style="color: #4758AB;">predict</span>(logi_reg_fit, <span class="at" style="color: #657422;">new_data =</span> lending_test),</span>
<span id="cb1-29">  <span class="fu" style="color: #4758AB;">predict</span>(logi_reg_fit, <span class="at" style="color: #657422;">new_data =</span> lending_test, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">"prob"</span>))</span>
<span id="cb1-30"></span>
<span id="cb1-31">threshold_data <span class="ot" style="color: #003B4F;">&lt;-</span> predictions <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-32">  probably<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">threshold_perf</span>(<span class="at" style="color: #657422;">truth =</span> Class, <span class="at" style="color: #657422;">estimate =</span> .pred_good, </span>
<span id="cb1-33">                           <span class="at" style="color: #657422;">thresholds =</span> <span class="fu" style="color: #4758AB;">seq</span>(<span class="fl" style="color: #AD0000;">0.5</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">by =</span> <span class="fl" style="color: #AD0000;">0.0025</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-34">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(.metric <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"distance"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-35">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">group =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">case_when</span>(.metric <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"sens"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"1"</span>,</span>
<span id="cb1-36">                                         .metric <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"spec"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"1"</span>,</span>
<span id="cb1-37">                                         <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"2"</span>))</span>
<span id="cb1-38"></span>
<span id="cb1-39">max_j_index_threshold <span class="ot" style="color: #003B4F;">&lt;-</span> threshold_data <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-40">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(.metric <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"j_index"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-41">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(.estimate <span class="sc" style="color: #5E5E5E;">==</span> <span class="fu" style="color: #4758AB;">max</span>(.estimate)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-42">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pull</span>(.threshold)</span>
<span id="cb1-43"></span>
<span id="cb1-44">ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ggplot</span>(threshold_data, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .threshold, <span class="at" style="color: #657422;">y =</span> .estimate, </span>
<span id="cb1-45">                                    <span class="at" style="color: #657422;">color =</span> .metric, <span class="at" style="color: #657422;">alpha =</span> group)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-46">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_line</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-47">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">theme_minimal</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-48">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_color_viridis_d</span>(<span class="at" style="color: #657422;">end =</span> <span class="fl" style="color: #AD0000;">0.9</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-49">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">scale_alpha_manual</span>(<span class="at" style="color: #657422;">values =</span> <span class="fu" style="color: #4758AB;">c</span>(.<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>), <span class="at" style="color: #657422;">guide =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-50">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">geom_vline</span>(<span class="at" style="color: #657422;">xintercept =</span> max_j_index_threshold, </span>
<span id="cb1-51">                      <span class="at" style="color: #657422;">alpha =</span> .<span class="dv" style="color: #AD0000;">6</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"grey30"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-52">  ggplot2<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">labs</span>(</span>
<span id="cb1-53">    <span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">"'Good' Threshold</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">(above this value is considered 'good')"</span>,</span>
<span id="cb1-54">    <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">"Metric Estimate"</span>,</span>
<span id="cb1-55">    <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Balancing performance by varying the threshold"</span>,</span>
<span id="cb1-56">    <span class="at" style="color: #657422;">subtitle =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"Sensitivity or specificity alone might not be"</span>,</span>
<span id="cb1-57">                      <span class="st" style="color: #20794D;">" enough!</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">Vertical line = Max J-Index"</span>))</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/2023-01-15-r-goodies-for-2023_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>The <code>max_j_index_threshold</code> has a value of 0.945 and the above viz helps supports the case for changing the discrete classification threshold from the baseline value of 0.5 (where a prediction probability above 0.5 indicates a “good”). Neat package with some other capabilities that I’m going to keep an eye out for.</p>
</section>
<section id="arrow-duckdb" class="level1">
<h1>2. Arrow + DuckDB</h1>
<p>Earlier in 2022, there was a lot of excitement on my Twitter feed with devs and data scientists discussing larger-than-memory data manipulation and ultra-fast ETL with <a href="https://duckdb.org/">DuckDB</a>, a new analytical data management system with bindings for Python and R. DuckDB offers a parallel vectorized execution engine for zero-copy query of <a href="https://arrow.apache.org/">Apache Arrow</a> data sets - Perfect for my world of <em>mostly</em> tabular data. DuckDB streams query results back to Arrow and this is possible via a SQL interface and API. As DuckDB puts it, they provide “an in-process SQL OLAP database management system.”</p>
<p>Below are some of my favorite DuckDB overviews and tutorials:</p>
<ol type="1">
<li><a href="https://duckdb.org/2021/12/03/duck-arrow.html#Benchmark%20Comparison"><em>DuckDB quacks Arrow</em>, Pedro Holanda and Jonathan Keane</a></li>
<li><a href="https://www.christophenicault.com/post/large_dataframe_arrow_duckdb/"><em>Manipulate big data with Arrow &amp; DuckDB</em>, Christophe Nicault</a></li>
<li><a href="https://www.richpauloo.com/post/parquet/"><em>Parquet, SQL, DuckDB, arrow, dbplyr and R</em>, Rich Pauloo</a></li>
</ol>
<p>If the above don’t make it clear, using dplyr with Arrow and DuckDB is a breeze. I haven’t yet mentioned the <a href="https://parquet.apache.org/">Apache Parquet</a> file format since I find it secondary to the above, but Arrow and DuckDB provide an easy approach to working with Parquet (and other) file formats and filesize (compared to a CSV) can be slimmed by an order of magnitude. Let’s dive into some stats, below, benchmarked by Christophe Nicault. The benchmarks relate to an 8GB CSV file with 59 million observations:</p>
<section id="size-on-disk" class="level2">
<h2 class="anchored" data-anchor-id="size-on-disk">Size on Disk</h2>
<p><img src="https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/images/size_on_disk.png" class="img-fluid"></p>
</section>
<section id="query-performance" class="level2">
<h2 class="anchored" data-anchor-id="query-performance">Query Performance</h2>
<p><img src="https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/images/performance_on_query.png" class="img-fluid"></p>
</section>
<section id="size-vs-performance" class="level2">
<h2 class="anchored" data-anchor-id="size-vs-performance">Size vs Performance</h2>
<p><img src="https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/images/size_vs_performance.png" class="img-fluid"></p>
</section>
</section>
<section id="encryption-with-r" class="level1">
<h1>3. Encryption with R</h1>
<p>R’s <a href="https://docs.ropensci.org/sodium/">sodium</a> package provides a binding to <a href="https://doc.libsodium.org/">libsodium</a> for higher-level cryptographic tooling. I first learned of {sodium} while working with Google BigQuery and learning about R’s <a href="https://gargle.r-lib.org/articles/managing-tokens-securely.html">gargle</a> package for securely managing access credentials. Another package I’d like to point attention to is <a href="https://docs.ropensci.org/cyphr/">cyphr</a>. I’ve used a combination of these packages for creating secure access to encrypted data objects.</p>
<p>I’d like to walk through two examples using these encryption tools:</p>
<ol type="1">
<li>Intro to {sodium} for keypair generation, message encrypt / decrpyt</li>
<li>Keypair gen with {sodium} + file encrypt / decrpt with {cyphr}</li>
</ol>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Installation from source on macOS or Linux requires <a href="https://doc.libsodium.org/">libsodium</a>
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>On macOS, install via homebrew: <code>brew install libsodium</code></li>
<li>On Debian or Ubuntu: <code>sudo apt-get install -y libsodium-dev</code></li>
<li>On Fedora: <code>sudo yum install libsodium-devel</code></li>
<li>On CentOS / RHEL, install via EPEL:
<ul>
<li><code>sudo yum install epel-release</code></li>
<li><code>sudo yum install libsodium-devel</code></li>
</ul></li>
</ul>
</div>
</div>
<section id="intro-to-sodium" class="level2">
<h2 class="anchored" data-anchor-id="intro-to-sodium">Intro to Sodium</h2>
<p>The following example uses {sodium} to generate a keypair and encrpt / decrypt a serialized message (representing the iris data set). One major benefit of encrypting objects like this is that you can publicly expose these encrypted objects since you alone hold the key to decrypt them. If you’re working with GitHub Actions, GitLab CI/CD, or another git-backed repository, you can save these encrypted messages in your public repo - If someone forks or clones your repository, they’ll be unable to decrypt the object without the hash key initially created in the keypair generation step.</p>
<p>The example below was <a href="https://docs.ropensci.org/sodium/#hello-world">written by Jeroen Ooms on rOpenSci</a> and is part of the documentation for the {sodium} package. I added the last step to show how to <code>unserialize()</code> an object previously decrypted.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r code-overflow-scroll number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(sodium)</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># Generate keypair:</span></span>
<span id="cb2-4">key <span class="ot" style="color: #003B4F;">&lt;-</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">keygen</span>()</span>
<span id="cb2-5">pub <span class="ot" style="color: #003B4F;">&lt;-</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">pubkey</span>(key)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># Encrypt message with pubkey</span></span>
<span id="cb2-8">msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">serialize</span>(iris, <span class="cn" style="color: #8f5902;">NULL</span>)</span>
<span id="cb2-9">ciphertext <span class="ot" style="color: #003B4F;">&lt;-</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">simple_encrypt</span>(msg, pub)</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;"># Decrypt message with private key</span></span>
<span id="cb2-12">out <span class="ot" style="color: #003B4F;">&lt;-</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">simple_decrypt</span>(ciphertext, key)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;"># Unserialize the decrypted message &amp; assign iris data to new obj</span></span>
<span id="cb2-15">iris_new <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unserialize</span>(out)</span></code></pre></div>
</div>
</section>
<section id="sodium-cyphr" class="level2">
<h2 class="anchored" data-anchor-id="sodium-cyphr">Sodium + Cyphr</h2>
<p>Using the {sodium} and {cyphr} packages, the code snippets below showcase three key steps: 3a) data encryption, 3b) in-line decryption (to be used as a script intended to run with a GitHub Actions Workflow every six hours), and 3c) the GitHub Actions YAML file to configure the automation workflow.</p>
<p>Using this approach, I can safely expose an encrypted RDS file on my public GitHub repo that contains secret API credentials for accessing Meetup.com and fetching new events that may have been posted. The encrypted RDS file can only be decrypted using the keypair hash saved with the <code>MEETUP_PWD</code> environment variable on my GitHub repo, a secret env var only visible to me.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
GitHub Actions
</div>
</div>
<div class="callout-body-container callout-body">
<p>To learn how to use secrets for use with GitHub Actions, the official <a href="https://docs.github.com/en/actions/security-guides/encrypted-secrets">Actions/Encrypted Secrets</a> documentation is an excellent end-to-end resource. A generalized overview of how to configure your GitHub Actions Workflow is available on GitHub’s <a href="https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions">Actions/Workflow Syntax</a> documentation. A brief overview of major updates to GitHub Actions for R Users was published on the <a href="https://www.tidyverse.org/blog/2022/06/actions-2-0-0/">Tidyverse Blog in June 2022</a>, with the most complete resource for R related GitHub Actions being on <a href="https://github.com/r-lib/actions">r-lib/actions</a>.</p>
</div>
</div>
<p>NOTE: For the purposes of GitHub Actions and the config YAML file covered in Step 3c, this file lives in the following path on my GitHub repo: <code>~/.github/workflows/main.yml</code></p>
</section>
<section id="step-3a-encrypt" class="level2">
<h2 class="anchored" data-anchor-id="step-3a-encrypt">Step 3a: Encrypt</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r code-overflow-scroll number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># The following is a one-time key encryption setup</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">library</span>(sodium)</span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;">library</span>(cyphr)</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">library</span>(meetupr)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;"># After doing a one-time interactive auth with {meetupr},</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;"># your Meetup token will be stored as an RDS file in the </span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;"># same path as your {meetupr} package:</span></span>
<span id="cb3-10">token_path <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">path.expand</span>(</span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;">file.path</span>(<span class="st" style="color: #20794D;">"~"</span>, <span class="st" style="color: #20794D;">"Library"</span>, <span class="st" style="color: #20794D;">"Application Support"</span>, </span>
<span id="cb3-13">              <span class="st" style="color: #20794D;">"meetupr"</span>, <span class="st" style="color: #20794D;">"meetup_token.rds"</span>)</span>
<span id="cb3-14">  )</span>
<span id="cb3-15"></span>
<span id="cb3-16">meetupr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">meetup_auth</span>(</span>
<span id="cb3-17">  <span class="at" style="color: #657422;">token =</span> <span class="cn" style="color: #8f5902;">NULL</span>,</span>
<span id="cb3-18">  <span class="at" style="color: #657422;">cache =</span> <span class="cn" style="color: #8f5902;">TRUE</span>,</span>
<span id="cb3-19">  <span class="at" style="color: #657422;">use_appdir =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb3-20">  <span class="at" style="color: #657422;">token_path =</span> token_path</span>
<span id="cb3-21">)</span>
<span id="cb3-22"></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;"># Encrypt the existing token to safely save </span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;"># meetupr_secret.rds in a public repo</span></span>
<span id="cb3-25">sodium_key <span class="ot" style="color: #003B4F;">&lt;-</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">keygen</span>()</span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;"># In your working environment, save a secret env var called</span></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;"># "MEETUPR_PWD" using the randomly generated sodium_key</span></span>
<span id="cb3-29"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="st" style="color: #20794D;">"MEETUPR_PWD"</span> <span class="ot" style="color: #003B4F;">=</span> sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bin2hex</span>(sodium_key))</span>
<span id="cb3-30"></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;"># Create a key for use with {cyphr}</span></span>
<span id="cb3-32">key <span class="ot" style="color: #003B4F;">&lt;-</span> cyphr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_sodium</span>(sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hex2bin</span>(<span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"MEETUPR_PWD"</span>)))</span>
<span id="cb3-33"></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;"># Encrypt the RDS and save as meetupr_secret.rds</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;"># in the working environment</span></span>
<span id="cb3-36">cyphr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">encrypt_file</span>(</span>
<span id="cb3-37">  token_path,</span>
<span id="cb3-38">  <span class="at" style="color: #657422;">key =</span> key,</span>
<span id="cb3-39">  <span class="at" style="color: #657422;">dest =</span> <span class="st" style="color: #20794D;">"meetupr_secret.rds"</span></span>
<span id="cb3-40">)</span></code></pre></div>
</div>
</section>
<section id="step-3b-decrypt" class="level2">
<h2 class="anchored" data-anchor-id="step-3b-decrypt">Step 3b: Decrypt</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource r code-overflow-scroll number-lines code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># This script was saved as "meetup_events.R" and it is run as part</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;"># of the GitHub Actions workflow on line 37 of the YAML file covered</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;"># in "Step 3: GitHub Actions YAML"</span></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;">library</span>(meetupr)</span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;">library</span>(cyphr)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;"># Generate Key with MEETUPR_PWD env var for MeetupR data CI/CD</span></span>
<span id="cb4-13">key <span class="ot" style="color: #003B4F;">&lt;-</span> cyphr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">key_sodium</span>(sodium<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">hex2bin</span>(<span class="fu" style="color: #4758AB;">Sys.getenv</span>(<span class="st" style="color: #20794D;">"MEETUPR_PWD"</span>)))</span>
<span id="cb4-14"></span>
<span id="cb4-15">temptoken <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tempfile</span>(<span class="at" style="color: #657422;">fileext =</span> <span class="st" style="color: #20794D;">".rds"</span>)</span>
<span id="cb4-16"></span>
<span id="cb4-17">cyphr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">decrypt_file</span>(<span class="st" style="color: #20794D;">"meetupr_secret.rds"</span>,</span>
<span id="cb4-18">                    <span class="at" style="color: #657422;">key =</span> key,</span>
<span id="cb4-19">                    <span class="at" style="color: #657422;">dest =</span> temptoken)</span>
<span id="cb4-20"></span>
<span id="cb4-21">token <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readRDS</span>(temptoken)[[<span class="dv" style="color: #AD0000;">1</span>]]</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;"># Non-Interactive Meetup Authorization</span></span>
<span id="cb4-24">token <span class="ot" style="color: #003B4F;">&lt;-</span> meetupr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">meetup_auth</span>(</span>
<span id="cb4-25">  <span class="at" style="color: #657422;">token =</span> token,</span>
<span id="cb4-26">  <span class="at" style="color: #657422;">use_appdir =</span> <span class="cn" style="color: #8f5902;">FALSE</span>,</span>
<span id="cb4-27">  <span class="at" style="color: #657422;">cache =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb4-28">)</span>
<span id="cb4-29"></span>
<span id="cb4-30"><span class="co" style="color: #5E5E5E;"># Save a temporary, updated Meetup personal access token that will</span></span>
<span id="cb4-31"><span class="co" style="color: #5E5E5E;"># be used downstream with the meetupr::get_events() function</span></span>
<span id="cb4-32"><span class="fu" style="color: #4758AB;">Sys.setenv</span>(<span class="at" style="color: #657422;">MEETUPR_PAT =</span> temptoken)</span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;"># Create a character vector of the Meetup accounts for data collection</span></span>
<span id="cb4-35">socal_groups <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"SOCAL-RUG"</span>, </span>
<span id="cb4-36">                  <span class="st" style="color: #20794D;">"Santa-Barbara-R-Users-Group"</span>, </span>
<span id="cb4-37">                  <span class="st" style="color: #20794D;">"Real-Data-Science-USA-R-Meetup"</span>,</span>
<span id="cb4-38">                  <span class="st" style="color: #20794D;">"useR-Group-in-San-Luis-Obispo-County"</span>, </span>
<span id="cb4-39">                  <span class="st" style="color: #20794D;">"rladies-irvine"</span>,</span>
<span id="cb4-40">                  <span class="st" style="color: #20794D;">"rladies-la"</span>,</span>
<span id="cb4-41">                  <span class="st" style="color: #20794D;">"rladies-pasadena"</span>,</span>
<span id="cb4-42">                  <span class="st" style="color: #20794D;">"rladies-riverside"</span>,</span>
<span id="cb4-43">                  <span class="st" style="color: #20794D;">"rladies-santa-barbara"</span>,</span>
<span id="cb4-44">                  <span class="st" style="color: #20794D;">"rladies-san-diego"</span>)</span>
<span id="cb4-45"></span>
<span id="cb4-46"><span class="co" style="color: #5E5E5E;"># Create a function for getting upcoming and past Meetup events</span></span>
<span id="cb4-47">get_meetup_events <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb4-48">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(meetupr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_events</span>(<span class="at" style="color: #657422;">urlname =</span> x)) <span class="sc" style="color: #5E5E5E;">&gt;</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-49">    meetupr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">get_events</span>(<span class="at" style="color: #657422;">urlname =</span> x) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-50">      dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">chapter =</span> x)</span>
<span id="cb4-51">  }</span>
<span id="cb4-52">}</span>
<span id="cb4-53"></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;"># Using purrr, iterate through each Meetup account, collect </span></span>
<span id="cb4-55"><span class="co" style="color: #5E5E5E;"># event data, and row-bind the resulting event listings</span></span>
<span id="cb4-56">events_raw <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb4-57">  purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_dfr</span>(<span class="at" style="color: #657422;">.x =</span> socal_groups, <span class="at" style="color: #657422;">.f =</span> get_meetup_events) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-58">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(chapter, dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">everything</span>())</span>
<span id="cb4-59"></span>
<span id="cb4-60"><span class="co" style="color: #5E5E5E;"># Data clean up</span></span>
<span id="cb4-61">events <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb4-62">  events_raw <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-63">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb4-64">    status <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">"draft"</span>,</span>
<span id="cb4-65">    <span class="sc" style="color: #5E5E5E;">!</span>stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_detect</span>(title, <span class="st" style="color: #20794D;">"Cross-post|cross-post"</span>),</span>
<span id="cb4-66">    <span class="sc" style="color: #5E5E5E;">!</span>stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_detect</span>(description, <span class="st" style="color: #20794D;">"Cross-post|cross-post"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-67">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">distinct</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-68">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">arrange</span>(dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">desc</span>(time)) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-69">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-70">    <span class="at" style="color: #657422;">Upcoming =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">if_else</span>(status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"published"</span>, <span class="st" style="color: #20794D;">"&amp;#x2713;"</span>, <span class="st" style="color: #20794D;">""</span>),</span>
<span id="cb4-71">    <span class="at" style="color: #657422;">Chapter =</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb4-72">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"SOCAL-RUG"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"SoCal RUG"</span>,</span>
<span id="cb4-73">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Santa-Barbara-R-Users-Group"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"Santa Barbara RUG"</span>,</span>
<span id="cb4-74">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"Real-Data-Science-USA-R-Meetup"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"Los Angeles RUG"</span>,</span>
<span id="cb4-75">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"useR-Group-in-San-Luis-Obispo-County"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"SLO RUG"</span>,</span>
<span id="cb4-76">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-irvine"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies Irvine"</span>,</span>
<span id="cb4-77">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-la"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies Los Angeles"</span>,</span>
<span id="cb4-78">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-pasadena"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies Pasadena"</span>,</span>
<span id="cb4-79">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-riverside"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies Riverside"</span>,</span>
<span id="cb4-80">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-santa-barbara"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies Santa Barbara"</span>,</span>
<span id="cb4-81">      chapter <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"rladies-san-diego"</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">"R-Ladies San Diego"</span>,</span>
<span id="cb4-82">      <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> chapter),</span>
<span id="cb4-83">    <span class="at" style="color: #657422;">Event =</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">'&lt;a href='</span>, <span class="st" style="color: #20794D;">'"'</span>, link, <span class="st" style="color: #20794D;">'"&gt;'</span>, title, <span class="st" style="color: #20794D;">'&lt;/a&gt;'</span>),</span>
<span id="cb4-84">    <span class="at" style="color: #657422;">Date =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as_date</span>(time),</span>
<span id="cb4-85">    <span class="at" style="color: #657422;">Time =</span> <span class="fu" style="color: #4758AB;">format.POSIXct</span>(time, <span class="at" style="color: #657422;">format =</span> <span class="st" style="color: #20794D;">"%I:%M %p"</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-86">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">select</span>(Upcoming, Chapter, Event, Date, <span class="st" style="color: #20794D;">"Time (PST)"</span> <span class="ot" style="color: #003B4F;">=</span> Time)</span>
<span id="cb4-87"></span>
<span id="cb4-88"><span class="fu" style="color: #4758AB;">saveRDS</span>(events, <span class="at" style="color: #657422;">file =</span> <span class="st" style="color: #20794D;">"events/events_past_and_upcoming.rds"</span>)</span></code></pre></div>
</div>
</section>
<section id="step-3c-github-actions-yaml" class="level2">
<h2 class="anchored" data-anchor-id="step-3c-github-actions-yaml">Step 3c: GitHub Actions YAML</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource bash code-overflow-scroll number-lines code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">name:</span> Render and Deploy Quarto Blog</span>
<span id="cb5-2"><span class="ex" style="color: null;">on:</span></span>
<span id="cb5-3">  <span class="ex" style="color: null;">pull_request:</span></span>
<span id="cb5-4">    <span class="ex" style="color: null;">branches:</span> [ master ]</span>
<span id="cb5-5">  <span class="ex" style="color: null;">push:</span></span>
<span id="cb5-6">    <span class="ex" style="color: null;">branches:</span> [ master ]</span>
<span id="cb5-7">  <span class="ex" style="color: null;">schedule:</span></span>
<span id="cb5-8">    <span class="ex" style="color: null;">-</span> cron:  <span class="st" style="color: #20794D;">'0 */6 * * *'</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="ex" style="color: null;">jobs:</span></span>
<span id="cb5-11">  <span class="ex" style="color: null;">build:</span></span>
<span id="cb5-12">    <span class="ex" style="color: null;">runs-on:</span> ubuntu-latest</span>
<span id="cb5-13">    <span class="ex" style="color: null;">steps:</span></span>
<span id="cb5-14">      <span class="ex" style="color: null;">-</span> name: Checkout Repo</span>
<span id="cb5-15">        <span class="ex" style="color: null;">uses:</span> actions/checkout@v3</span>
<span id="cb5-16">        <span class="ex" style="color: null;">with:</span></span>
<span id="cb5-17">          <span class="ex" style="color: null;">fetch-depth:</span> 0</span>
<span id="cb5-18">          </span>
<span id="cb5-19">      <span class="ex" style="color: null;">-</span> name: Install libsodium</span>
<span id="cb5-20">        <span class="ex" style="color: null;">run:</span> sudo apt-get install <span class="at" style="color: #657422;">-y</span> libsodium-dev</span>
<span id="cb5-21"></span>
<span id="cb5-22">      <span class="ex" style="color: null;">-</span> name: Setup Quarto CLI</span>
<span id="cb5-23">        <span class="ex" style="color: null;">uses:</span> quarto-dev/quarto-actions/setup@v2</span>
<span id="cb5-24">        <span class="ex" style="color: null;">with:</span></span>
<span id="cb5-25">          <span class="ex" style="color: null;">version:</span> 1.2.280</span>
<span id="cb5-26"></span>
<span id="cb5-27">      <span class="ex" style="color: null;">-</span> name: Setup R </span>
<span id="cb5-28">        <span class="ex" style="color: null;">uses:</span> r-lib/actions/setup-r@v2</span>
<span id="cb5-29">        <span class="ex" style="color: null;">with:</span></span>
<span id="cb5-30">          <span class="ex" style="color: null;">r-version:</span> <span class="st" style="color: #20794D;">'4.2.2'</span></span>
<span id="cb5-31">          <span class="ex" style="color: null;">use-public-rspm:</span> true</span>
<span id="cb5-32">      </span>
<span id="cb5-33">      <span class="ex" style="color: null;">-</span> name: Setup renv</span>
<span id="cb5-34">        <span class="ex" style="color: null;">uses:</span> r-lib/actions/setup-renv@v2</span>
<span id="cb5-35"></span>
<span id="cb5-36">      <span class="ex" style="color: null;">-</span> name: Fetch Events from Meetup</span>
<span id="cb5-37">        <span class="ex" style="color: null;">run:</span> source<span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">here::here</span><span class="er" style="color: #AD0000;">(</span><span class="st" style="color: #20794D;">"helpers"</span><span class="ex" style="color: null;">,</span> <span class="st" style="color: #20794D;">"meetup_events.R"</span><span class="kw" style="color: #003B4F;">))</span></span>
<span id="cb5-38">        <span class="ex" style="color: null;">env:</span></span>
<span id="cb5-39">          <span class="ex" style="color: null;">MEETUPR_PWD:</span> <span class="va" style="color: #111111;">${</span><span class="er" style="color: #AD0000;">{ secrets.MEETUPR_PWD </span><span class="va" style="color: #111111;">}</span>}</span>
<span id="cb5-40">        <span class="ex" style="color: null;">shell:</span> Rscript {0}</span>
<span id="cb5-41"></span>
<span id="cb5-42">      <span class="ex" style="color: null;">-</span> name: Render and Publish to Netlify</span>
<span id="cb5-43">        <span class="ex" style="color: null;">uses:</span> quarto-dev/quarto-actions/publish@v2</span>
<span id="cb5-44">        <span class="ex" style="color: null;">with:</span></span>
<span id="cb5-45">          <span class="ex" style="color: null;">target:</span> netlify</span>
<span id="cb5-46">          <span class="ex" style="color: null;">NETLIFY_AUTH_TOKEN:</span> <span class="va" style="color: #111111;">${</span><span class="er" style="color: #AD0000;">{ secrets.NETLIFY_AUTH_TOKEN </span><span class="va" style="color: #111111;">}</span>}</span></code></pre></div>
</div>
</section>
</section>
<section id="session-info" class="level1">
<h1>Session Info</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-overflow-scroll code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;">R</span> version 4.2.2 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">2022-10-31</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb6-2"><span class="ex" style="color: null;">Platform:</span> aarch64-apple-darwin20 <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">64-bit</span><span class="kw" style="color: #003B4F;">)</span></span>
<span id="cb6-3"><span class="ex" style="color: null;">Running</span> under: macOS Ventura 13.1</span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="ex" style="color: null;">Matrix</span> products: default</span>
<span id="cb6-6"><span class="ex" style="color: null;">LAPACK:</span> /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="ex" style="color: null;">locale:</span></span>
<span id="cb6-9"><span class="ex" style="color: null;">[1]</span> en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8</span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="ex" style="color: null;">attached</span> base packages:</span>
<span id="cb6-12"><span class="ex" style="color: null;">[1]</span> stats     graphics  grDevices utils     datasets  methods   base     </span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="ex" style="color: null;">other</span> attached packages:</span>
<span id="cb6-15"> <span class="ex" style="color: null;">[1]</span> quarto_1.2          purrr_1.0.1         lubridate_1.9.0    </span>
<span id="cb6-16"> <span class="ex" style="color: null;">[4]</span> timechange_0.2.0    stringr_1.5.0       meetupr_0.2.99.9002</span>
<span id="cb6-17"> <span class="ex" style="color: null;">[7]</span> cyphr_1.1.4         sodium_1.2.1        ggplot2_3.4.0      </span>
<span id="cb6-18"><span class="ex" style="color: null;">[10]</span> modeldata_1.0.1     rsample_1.1.1       dplyr_1.0.10       </span>
<span id="cb6-19"><span class="ex" style="color: null;">[13]</span> probably_0.1.0      parsnip_1.0.3      </span>
<span id="cb6-20"></span>
<span id="cb6-21"><span class="ex" style="color: null;">loaded</span> via a namespace <span class="er" style="color: #AD0000;">(</span><span class="ex" style="color: null;">and</span> not attached<span class="kw" style="color: #003B4F;">)</span><span class="bu" style="color: null;">:</span></span>
<span id="cb6-22"> <span class="ex" style="color: null;">[1]</span> tidyselect_1.2.0  xfun_0.36         listenv_0.9.0    </span>
<span id="cb6-23"> <span class="ex" style="color: null;">[4]</span> colorspace_2.0-3  vctrs_0.5.1       generics_0.1.3   </span>
<span id="cb6-24"> <span class="ex" style="color: null;">[7]</span> htmltools_0.5.4   yaml_2.3.6        utf8_1.2.2       </span>
<span id="cb6-25"><span class="ex" style="color: null;">[10]</span> rlang_1.0.6       pillar_1.8.1      later_1.3.0      </span>
<span id="cb6-26"><span class="ex" style="color: null;">[13]</span> glue_1.6.2        withr_2.5.0       DBI_1.1.3        </span>
<span id="cb6-27"><span class="ex" style="color: null;">[16]</span> lifecycle_1.0.3   munsell_0.5.0     gtable_0.3.1     </span>
<span id="cb6-28"><span class="ex" style="color: null;">[19]</span> anytime_0.3.9     future_1.30.0     evaluate_0.19    </span>
<span id="cb6-29"><span class="ex" style="color: null;">[22]</span> codetools_0.2-18  knitr_1.41        fastmap_1.1.0    </span>
<span id="cb6-30"><span class="ex" style="color: null;">[25]</span> ps_1.7.2          parallel_4.2.2    fansi_1.0.3      </span>
<span id="cb6-31"><span class="ex" style="color: null;">[28]</span> furrr_0.3.1       Rcpp_1.0.9        scales_1.2.1     </span>
<span id="cb6-32"><span class="ex" style="color: null;">[31]</span> jsonlite_1.8.4    parallelly_1.34.0 digest_0.6.31    </span>
<span id="cb6-33"><span class="ex" style="color: null;">[34]</span> stringi_1.7.12    processx_3.8.0    grid_4.2.2       </span>
<span id="cb6-34"><span class="ex" style="color: null;">[37]</span> hardhat_1.2.0     cli_3.6.0         tools_4.2.2      </span>
<span id="cb6-35"><span class="ex" style="color: null;">[40]</span> magrittr_2.0.3    tibble_3.1.8      tidyr_1.2.1      </span>
<span id="cb6-36"><span class="ex" style="color: null;">[43]</span> pkgconfig_2.0.3   rmarkdown_2.19    assertthat_0.2.1 </span>
<span id="cb6-37"><span class="ex" style="color: null;">[46]</span> yardstick_1.1.0   rstudioapi_0.14   ratelimitr_0.4.1 </span>
<span id="cb6-38"><span class="ex" style="color: null;">[49]</span> R6_2.5.1          globals_0.16.2    compiler_4.2.2   </span></code></pre></div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidymodels</category>
  <category>probably</category>
  <category>arrow</category>
  <category>duckdb</category>
  <category>sodium</category>
  <category>cyphr</category>
  <guid>https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/2023-01-15-r-goodies-for-2023.html</guid>
  <pubDate>Sun, 15 Jan 2023 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2023-01-15-r-goodies-for-2023/images/apache_arrow.png" medium="image" type="image/png" height="65" width="144"/>
</item>
<item>
  <title>Data Science Hangout</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2023-01-01-data-science-hangout/2023-01-01-data-science-hangout.html</link>
  <description><![CDATA[ 



<section id="background" class="level1">
<h1>Background</h1>
<p>I’ve been attending Posit’s weekly <a href="https://posit.co/data-science-hangout/">Data Science Hangout</a> since 2021 and it’s been one of my favorite standing weekly meetings. This is a great platform to hear how data science leaders are using R to drive business results and the host, Rachael Dempsey, does an excellent job fostering an inclusive and open culture. I was thrilled to be the guest several weeks ago in Dec 2022. 🚀</p>
<p>I talked about my transition to data science from a career in financial modeling and consulting, talked about my love for Shiny and the R community, and gave some tips on how to start your own data science community. I also said “you know” an inordinate number of times, please forgive me in advance. 🙃</p>
<p>Whether you’re a data science practitioner, student, looking to make a career pivot, or simply wanting to network, the Data Science Hangout has something for all. If you haven’t already, I highly encourage you to attend Posit’s Data Science Hangout live sometime in the future.</p>
</section>
<section id="watch-on-youtube" class="level1">
<h1>Watch on YouTube</h1>
<div class="quarto-video ratio ratio-16x9"><iframe src="https://www.youtube.com/embed/-mm5tHQVPY8" title="From Excel to Lead Machine Learning Engineer" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidyverse</category>
  <category>shiny</category>
  <category>machine learning</category>
  <category>tidymodels</category>
  <guid>https://www.javierorracadeatcu.com/posts/2023-01-01-data-science-hangout/2023-01-01-data-science-hangout.html</guid>
  <pubDate>Sun, 01 Jan 2023 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2023-01-01-data-science-hangout/images/Posit_Data_Science_Hangout.png" medium="image" type="image/png" height="78" width="144"/>
</item>
<item>
  <title>Build a Shiny App Demo</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/2022-11-15-shiny-bslib-demo.html</link>
  <description><![CDATA[ 



<section id="background" class="level1">
<h1>Background</h1>
<p>If you Google Search “applying for jobs is,” you see auto-completion suggestions that feel about right…<img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/google_auto_suggestions.png" class="img-fluid"></p>
<p>Applying for jobs is both exhausting <em>and</em> a full-time job. Data scientists are expected to stay on top of their statistical education, have robust GitHub repositories, and they’re expected to know how to apply ever-changing technologies for DevOps and reproducible machine learning… And all this in addition to the endless resume and cover letter tweaks you’re probably making for each job (as you should).</p>
<p>If you’re an academic wanting to pivot to industry or a data scientist looking for a job change, I propose a simple (<em>or simple-ish</em>) solution to standing out from the crowd in a meaningful way: Build an easy-to-access web application for your future employers.</p>
<p>In July 2022, <a href="https://www.linkedin.com/in/travisgerke/">Travis Gerke</a> held a presentation at rstudio::conf(2022) titled <a href="https://www.rstudio.com/conference/2022/talks/wtf-teach-you-industry/"><em>What They Forgot to Teach You About Industry Transitions from Academia</em></a> (or “WTF-AITA” 😬). Travis presented my Shiny app as a “cover letter accessory” and it motivated me to write this tutorial such that anybody familiar with R, GitHub, and the RStudio IDE could deploy their own demo Shiny app for prospective employers.</p>
</section>
<section id="steps-to-edit-the-app" class="level1">
<h1>Steps to Edit the App</h1>
<p>To ensure a smooth installation, I recommend installing the latest version of R (4.2.2) and the latest version of the RStudio IDE. The underlying R scripts used on this Shiny app rely on the native pipe operator (<code>|&gt;</code>) introduced in base R 4.1.0. If you do not have access to the native pipe, you will not be able to run the app without additional code tweaks, i.e., replacing all instances of the native pipe (<code>|&gt;</code>) with the <code>magrittr</code> pipe (<code>%&gt;%</code>).</p>
<div class="callout-warning callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Git for the R User
</div>
</div>
<div class="callout-body-container callout-body">
<p>The next steps assume that you’re familiar with GitHub, you’ve installed R + <a href="https://github.com/git-guides/install-git">Git</a> + the <a href="https://posit.co/download/rstudio-desktop/">RStudio IDE</a>, and you’ve connected RStudio to GitHub. Jenny Bryan’s <a href="https://happygitwithr.com/rstudio-git-github.html"><em>Happy Git and GitHub for the useR</em></a> is a great resource if you’re stuck on any of these topics.</p>
</div>
</div>
<section id="clone-repo" class="level2">
<h2 class="anchored" data-anchor-id="clone-repo">1: Clone Repo</h2>
<p>We’ll start by forking this GitHub repo into your repository to allow you to experiment with my code without actually changing anything in my original project repo. To do this, navigate to my GitHub repo ( <a href="https://github.com/JavOrraca/bslib_demo_shiny">JavOrraca/bslib_demo_shiny</a>) and click on the <code>Fork</code> button in the top-right of the repo. This will prompt you to “Create a new fork” - Typically, I like to keep all of the defaults intact. When you’re ready to create the new fork, simply hit the <code>Create fork</code> button on the bottom of the screen.</p>
<p>Assuming you kept the original repository name, you should see a newly created repo titled “bslib_demo_shiny” in your GitHub repositories. It contains a full copy of all files and folders found in my original project repo.</p>
<p>Next, you’ll want to clone this repo to your local machine. Using the RStudio IDE, navigate to its menu bar and click on <code>File</code> -&gt; <code>New Project</code> -&gt; <code>Version Control</code> -&gt; <code>Git</code>, copy/paste your repo’s clone URL, choose your local project directory path of choice, and click on <code>Create Project</code>.</p>
<p>RStudio IDE’s <em>New Project Wizard</em> will launch in a popup window after selecting <code>New Project</code> from the file menu. You should expect the following:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/clone_git_repo.gif" class="img-fluid figure-img" style="width:65.0%"></p>
</figure>
</div>
<p>This process will create a local clone of all files and folders found on your remote GitHub repo. Once all files are downloaded for this project, the files and folder structure will look like this:</p>
<p>├── Dockerfile <br>├── LICENSE <br>├── README.md <br>├── bslib_demo_shiny.Rproj <br>├── global.R <br>├── helpers <br>│ ├── custom_theme.R <br>│ ├── footer.R <br>│ └── navbar.R <br>├── modules <br>│ ├── mod_About.R <br>│ ├── mod_Mapping.R <br>│ ├── mod_Overview.R <br>│ └── mod_Reports.R <br>├── renv <br>│ ├── activate.R <br>│ ├── library <br>│ │ └── R-4.2 <br>│ ├── sandbox <br>│ │ └── R-4.2 <br>│ ├── settings.dcf <br>│ └── staging <br>├── renv.lock <br>├── server.R <br>├── ui.R <br>├── www <br>│ ├── Shiny_Demo_Preview.png <br>│ ├── blr_logo-primary.png <br>│ └── styles.scss</p>
</section>
<section id="install-packages" class="level2">
<h2 class="anchored" data-anchor-id="install-packages">2: Install Packages</h2>
<p>It’s important to make note of the <code>renv</code> folder. This Shiny app relies on the <a href="https://rstudio.github.io/renv/articles/renv.html"><code>renv</code></a> package to manage project-package dependencies. If the Shiny app requires different package versions than those installed on your system’s main R library path, this approach will install the necessary packages in the <code>renv</code> directory.</p>
<p>To install the required R packages for this app, follow the instructions presented in your RStudio IDE Console immediately after cloning the GitHub repo or execute the command <code>renv::restore()</code>. This process will restore the package state as recorded in the <code>renv.lock</code> file - This “lockfile” records all of the R package names and versions required to run this specific Shiny app.</p>
<p>Once the project-package dependencies are installed, test launch the Shiny app by running <code>shiny::runApp()</code> in the Console or by clicking on the <code>Run App</code> button in the RStudio IDE. The <code>Run App</code> button only appears if you’re inside the <code>global.R</code>, <code>ui.R</code>, and <code>server.R</code> files - These three filenames are unique to Shiny and the RStudio IDE recognizes them as such.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/run_app.gif" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="app-customization" class="level2">
<h2 class="anchored" data-anchor-id="app-customization">3: App Customization</h2>
<p>While there are many ways to configure a Shiny app, the global aesthetics of this app have been configured using the <a href="https://rstudio.github.io/bslib/"><code>bslib</code></a> and <a href="https://rstudio.github.io/thematic/"><code>thematic</code></a> packages. These packages provide tools for customizing Bootstrap themes and they introduce Sass variables to Shiny (in my opinion, making the customization process much more unified).</p>
<p>The default Bootstrap version for <code>bslib</code> is version 5, however, this app was designed using Bootstrap 4. The <code>thematic</code> package provides a centralized approach to styling certain R visualizations such as those generated from <code>ggplot2</code>.</p>
<p>To fully customize the color scheme and overall theme of the app to your liking, make revisions to the following files that are sourced at runtime:</p>
<section id="helperscustom_theme.r" class="level3">
<h3 class="anchored" data-anchor-id="helperscustom_theme.r"><code>helpers/custom_theme.R</code></h3>
<p>This helper file creates two functions (<code>fn_custom_theme()</code> and <code>fn_thematic_theme()</code>) that are loaded into your global environment at runtime. Here you can specify base fonts, background (<code>bg</code>) and foreground (<code>fg</code>) colors, and other accent colors used throughout the Shiny app. The <code>fn_custom_theme()</code> function is called in line 3 of <code>ui.R</code> (in the app’s root directory) and the <code>fn_thematic_theme()</code> function is called in line 56 of <code>modules/mod_Overview.R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Overarching bslib theme</span></span>
<span id="cb1-2">fn_custom_theme <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-3">  bslib<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">bs_theme</span>(</span>
<span id="cb1-4">    <span class="at" style="color: #657422;">version =</span> <span class="st" style="color: #20794D;">"4"</span>,</span>
<span id="cb1-5">    <span class="at" style="color: #657422;">base_font =</span> sass<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">font_google</span>(<span class="st" style="color: #20794D;">"Open Sans"</span>),</span>
<span id="cb1-6">    <span class="at" style="color: #657422;">bg =</span> <span class="st" style="color: #20794D;">"#ffffff"</span>,</span>
<span id="cb1-7">    <span class="at" style="color: #657422;">fg =</span> <span class="st" style="color: #20794D;">"#1d2d42"</span>,</span>
<span id="cb1-8">    <span class="at" style="color: #657422;">primary =</span> <span class="st" style="color: #20794D;">"#f3d436"</span>, </span>
<span id="cb1-9">    <span class="at" style="color: #657422;">secondary =</span> <span class="st" style="color: #20794D;">"#1d2d42"</span>,</span>
<span id="cb1-10">    <span class="at" style="color: #657422;">success =</span> <span class="st" style="color: #20794D;">"#1d2d42"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;">bs_add_variables</span>(<span class="st" style="color: #20794D;">"border-bottom-width"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"6px"</span>,</span>
<span id="cb1-12">                     <span class="st" style="color: #20794D;">"border-color"</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">"$primary"</span>,</span>
<span id="cb1-13">                     <span class="at" style="color: #657422;">.where =</span> <span class="st" style="color: #20794D;">"declarations"</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-14">    <span class="fu" style="color: #4758AB;">bs_add_rules</span>(sass<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sass_file</span>(<span class="st" style="color: #20794D;">"www/styles.scss"</span>))</span>
<span id="cb1-15">}</span>
<span id="cb1-16"></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;"># Thematic theme for ggplot2 outputs</span></span>
<span id="cb1-18">fn_thematic_theme <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>() {</span>
<span id="cb1-19">  thematic<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">thematic_theme</span>(</span>
<span id="cb1-20">    <span class="at" style="color: #657422;">bg =</span> <span class="st" style="color: #20794D;">"#ffffff"</span>,</span>
<span id="cb1-21">    <span class="at" style="color: #657422;">fg =</span> <span class="st" style="color: #20794D;">"#1d2d42"</span>,</span>
<span id="cb1-22">    <span class="at" style="color: #657422;">accent =</span> <span class="st" style="color: #20794D;">"#f3d436"</span>,</span>
<span id="cb1-23">    <span class="at" style="color: #657422;">font =</span> <span class="fu" style="color: #4758AB;">font_spec</span>(sass<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">font_google</span>(<span class="st" style="color: #20794D;">"Open Sans"</span>), <span class="at" style="color: #657422;">scale =</span> <span class="fl" style="color: #AD0000;">1.75</span>)</span>
<span id="cb1-24">  )</span>
<span id="cb1-25">}</span></code></pre></div>
</div>
</section>
<section id="helpersfooter.r" class="level3">
<h3 class="anchored" data-anchor-id="helpersfooter.r"><code>helpers/footer.R</code></h3>
<p>This file creates the <code>fn_footer()</code> helper function that powers the Shiny app’s footer. The <code>fn_footer()</code> function uses Shiny <code>tags</code> in conjunction with <code>htmltools::HTML()</code> (exported to the <code>shiny</code> package) to create an HTML footer tag that can process raw HTML. I’ve used it to include my name and website in the footer and the <code>fn_footer()</code> function is called in line 7 of <code>ui.R</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb2-1">fn_footer <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(){</span>
<span id="cb2-2">  tags<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">footer</span>(</span>
<span id="cb2-3">    <span class="fu" style="color: #4758AB;">HTML</span>(</span>
<span id="cb2-4">      <span class="st" style="color: #20794D;">"This web app demo was developed by &lt;a href='https://www.javierorracadeatcu.com'&gt;Javier Orraca-Deatcu&lt;/a&gt; with R + Shiny"</span></span>
<span id="cb2-5">    )</span>
<span id="cb2-6">  )</span>
<span id="cb2-7">}</span></code></pre></div>
</div>
</section>
<section id="helpersnavbar.r" class="level3">
<h3 class="anchored" data-anchor-id="helpersnavbar.r"><code>helpers/navbar.R</code></h3>
<p>This script sets the navigation bar’s branding (logo and hyperlink) and wraps it into the helper function <code>fn_navbar()</code>. This function is passed to the <code>title</code> argument on line 5 of <code>ui.R</code> and it creates an HTML <code>div</code> with a custom <code>class</code> attribute (<code>bloomreach_logo</code>) that can be further styled with CSS in the <code>www/styles.scss</code> “Sassy CSS” file.</p>
<div class="callout-tip callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
About Shiny’s www folder
</div>
</div>
<div class="callout-body-container callout-body">
<p>The image path in line 5, below, does not specify a full path despite this image existing in the <code>www</code> folder. In Shiny projects, the <code>www</code> directory is used for storing elements that will be rendered in the web browser and not from script outputs. We do not need to include the full path on line 5 of <code>helpers/navbar.R</code> as Shiny knows to look for <code>blr_logo-primary.png</code> in the <code>www</code> folder.</p>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource r number-lines code-with-copy"><code class="sourceCode r"><span id="cb3-1">fn_navbar <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(){</span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">div</span>(</span>
<span id="cb3-3">    <span class="at" style="color: #657422;">class =</span> <span class="st" style="color: #20794D;">"bloomreach_logo"</span>,</span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">a</span>(<span class="at" style="color: #657422;">href =</span> <span class="st" style="color: #20794D;">"https://www.bloomreach.com/"</span>,</span>
<span id="cb3-5">      <span class="fu" style="color: #4758AB;">img</span>(<span class="at" style="color: #657422;">src =</span> <span class="st" style="color: #20794D;">"blr_logo-primary.png"</span>,</span>
<span id="cb3-6">          <span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Bloomreach"</span>)</span>
<span id="cb3-7">    )</span>
<span id="cb3-8">  )</span>
<span id="cb3-9">}</span></code></pre></div>
</div>
</section>
<section id="modulesabout.r" class="level3">
<h3 class="anchored" data-anchor-id="modulesabout.r"><code>modules/About.R</code></h3>
<p>This script defines the UI and Server functions used to render the <em>About</em> page on the Shiny app. Technically, the <em>Overview</em>, <em>Mapping</em>, <em>Reports</em>, and <em>About</em> pages of the Shiny app are tabs toggled with <code>shiny::tabPanel()</code>. Now that you’ve had some exposure to <code>htmltools::HTML()</code>, you should be able to revise the raw HTML in this script to build your own <em>About</em> page. It’s fairly straightforward so I won’t show this module in a code chunk - Please reach out to me directly or in the comments section if you have any questions.</p>
</section>
</section>
<section id="example-tweaks" class="level2">
<h2 class="anchored" data-anchor-id="example-tweaks">4: Example Tweaks</h2>
<p>Now that we’ve covered the files in your Shiny project that need to be updated if you want to deploy your own custom-styled demo Shiny app, let’s pivot to a real world example. Let’s say our name is Steve Wozniak and we want to design a Shiny app that invokes a retro Apple feel… After finding a decent logo to use and saving it to <code>www/retro_apple_logo.png</code>, below are the steps that we would need to follow to update our app:</p>
<ul>
<li><code>helpers/custom_theme.R</code>
<ul>
<li>Line 5: <code>base_font = sass::font_google("Press Start 2P", local = FALSE, display = "swap"),</code></li>
<li>Line 8: <code>primary = "#01c700",</code></li>
<li>Line 22: <code>accent = "#01c700",</code></li>
</ul></li>
<li><code>helpers/footer.R</code>
<ul>
<li>Line 4: <code>"This web app demo was developed by &lt;a href='http://www.woz.org/'&gt;Steve Wozniak&lt;/a&gt; with R + Shiny"</code></li>
</ul></li>
<li><code>helpers/navbar.R</code>
<ul>
<li>Line 3: <code>class = "retro_apple",</code></li>
<li>Line 4: <code>a(href = "http://www.apple.com/",</code></li>
<li>Line 5: <code>img(src = "retro_apple_logo.png",</code></li>
<li>Line 6: <code>title = "Apple")</code></li>
</ul></li>
</ul>
<p>Let’s give this app a test run and see how it changed the appearance:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/run_revised_app.gif" class="img-fluid figure-img"></p>
</figure>
</div>
<p>So far, so good! We’ve got a retro logo (re-sized to fit in the top-left of the navbar), a retro font (pulled from Google Fonts), and the primary and accent colors have been updated from yellow to neon green. There are several additional edits we <em>could</em> make but for now, I like it.</p>
</section>
<section id="app-deployment" class="level2">
<h2 class="anchored" data-anchor-id="app-deployment">5: App Deployment</h2>
<p>Now we’re ready to publish your newly revised Shiny app. We’ll use the <a href="https://www.shinyapps.io/">shinyapps.io</a> platform by Posit to push-button deploy our app from the RStudio IDE. For our needs, a free account will suffice as the free tier allows up to 5 Shiny app deployments with a combined 25 monthly active hours of usage. It’s important to note that if someone launches your app and keeps it running in a tab, this is considered “active” runtime, so encourage your shinyapps.io users to close the browser window when they’re done using your app.</p>
<p>If you do not have a shinyapps.io account or you have not synced your RStudio IDE to shinyapps.io via security token, please review the shinyapps.io <a href="https://docs.posit.co/shinyapps.io/getting-started.html#working-with-shiny-for-r">Getting Started</a> documentation. Once you’re set up, it will be a breeze to publish your app. If you’re stuck, again feel free to reach out to me directly.</p>
<p>Similar to the way that the <code>Run App</code> button will present itself if you’re inside the <code>global.R</code>, <code>ui.R</code>, or <code>server.R</code> files, you’ll also see a blue sync-looking button that gives you the power of push-button deployment from within the RStudio IDE:</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/publish_button.png" class="img-fluid"> <br>Clicking that button will open a new window to help you publish your app to the shinyapps.io servers. The title you select will be the name of the application on your shinyapps.io dashboard and it will also be included in the URL of your app. For example, I named my app “Bloomreach_Shiny_App” so the URL to visit my app is <a href="https://javierorraca.shinyapps.io/Bloomreach_Shiny_App/">https://javierorraca.shinyapps.io/Bloomreach_Shiny_App/</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/publish_to_server.png" class="img-fluid figure-img" style="width:75.0%"></p>
</figure>
</div>
<p>If you use a title that already exists in your shinyapps.io dashboard, you will force overwrite the prior app with the same name, so take caution when publishing. More often than not, it’s desired to overwrite an app so that you can regularly push updates to production to the same URL, however, there are instances where this behavior would not be desired. Regardless of your publishing intention, RStudio IDE will provide a warning to confirm that you want to write over a shinyapps.io application with the same name.</p>
<p>Since the <code>Dockerfile</code> is not relevant to this project deployment, I recommend un-checking <code>Dockerfile</code> from the list of file from which to publish. Once you’re ready, click on <code>Publish</code> and a new tab, <em>Deploy</em>, will be visible in the bottom-left of your RStudio IDE. This process takes several minutes since shinyapps.io will 1) install an R image with all the project-package dependencies needed to run your Shiny app, and 2) build and deploy the Shiny app itself. Once publishing is complete, you should see something like this:</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/deploy_pane.png" class="img-fluid" style="width:85.0%" data-fig-align="center"> <br></p>
</section>
<section id="git-commit-push" class="level2">
<h2 class="anchored" data-anchor-id="git-commit-push">6: Git Commit &amp; Push</h2>
<p>Now that you’ve successfully published your application from the RStudio IDE, wrap up your changes and commit / push them back to your GitHub repo. There are several ways to do this (GitHub Desktop app, Terminal, Windows Powershell, etc.) but I’ve found the easiest to be within the RStudio IDE. First, you’ll want to commit (or save) a local snapshot of the edits you’ve made from the remote GitHub repo. Since this commit is saved locally, you’ll also need to push this commit back to your GitHub repo.</p>
<p>Under the <em>Git</em> pane, click on <code>Commit</code> to open a window that allows you to inspect the files that were modified, added, deleted, etc. The quickest way to stage all files for commit is to click on any of the filenames you edited in the top-left pane of the commit popup window, select all files using the <em>Select All</em> keystroke (Ctrl+A on Windows or Cmd+A on Mac), then click on the <code>Stage</code> button. Write a message in the blank top-right message box for this commit - Keep it succinct about the file(s) changes that you’ve made. Click on the <code>Commit</code> button under the message box and this saves a local snapshot of the changes you’ve made.</p>
<p>To push the changes back to GitHub, click on the green <code>Push</code> button in the top-right of the commit window and this will push your locally committed changes to your remote GitHub repo. Now, in addition to the live app that you’ve deployed, you’ll also be able to direct end users to your GitHub repo with your app’s source code.</p>
</section>
</section>
<section id="recap-next-steps" class="level1">
<h1>Recap &amp; Next Steps</h1>
<p>It didn’t feel like it but if you’re newer to Shiny, we did a lot! Let’s recap everything we ran through in this tutorial:</p>
<ol type="1">
<li>From GitHub, you forked my original project repo to your account</li>
<li>You cloned your remote GitHub repo to your local machine using the RStudio IDE</li>
<li>You used the <code>renv</code> package to install specific package versions as recorded on the <code>renv.lock</code> lockfile</li>
<li>You customized the Shiny app by tweaking files in the <code>helpers/</code> and <code>modules/</code> folders</li>
<li>You deployed your app to shinyapps.io from the RStudio IDE</li>
<li>You pushed your changes back to your public GitHub repo so others can easily review your source code</li>
</ol>
<p>You’ve done a lot! If you’re stuck on any of the above, please do reach out either on LinkedIn, or Twitter, or by using the Comments section below this post. I won’t go into details of Docker on this blog post but in the future, I’d like to make a follow-up post to show you how to build your own Docker image from the <code>Dockerfile</code> and push it to a public Docker Hub repo… With this approach, you have many more options for deploying your Shiny apps on your server or virtual machines of choice.</p>
</section>
<section id="shiny-session-info" class="level1">
<h1>Shiny Session Info</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">R version <span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">2.2</span> (<span class="dv" style="color: #AD0000;">2022-10-31</span>)</span>
<span id="cb4-2">Platform<span class="sc" style="color: #5E5E5E;">:</span> aarch64<span class="sc" style="color: #5E5E5E;">-</span>apple<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">darwin20</span> (<span class="dv" style="color: #AD0000;">64</span><span class="sc" style="color: #5E5E5E;">-</span>bit)</span>
<span id="cb4-3">Running under<span class="sc" style="color: #5E5E5E;">:</span> macOS Ventura <span class="dv" style="color: #AD0000;">13</span>.<span class="fl" style="color: #AD0000;">0.1</span></span>
<span id="cb4-4"></span>
<span id="cb4-5">Matrix products<span class="sc" style="color: #5E5E5E;">:</span> default</span>
<span id="cb4-6">LAPACK<span class="sc" style="color: #5E5E5E;">:</span> <span class="er" style="color: #AD0000;">/</span>Library<span class="sc" style="color: #5E5E5E;">/</span>Frameworks<span class="sc" style="color: #5E5E5E;">/</span>R.framework<span class="sc" style="color: #5E5E5E;">/</span>Versions<span class="sc" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">4.2</span><span class="sc" style="color: #5E5E5E;">-</span>arm64<span class="sc" style="color: #5E5E5E;">/</span>Resources<span class="sc" style="color: #5E5E5E;">/</span>lib<span class="sc" style="color: #5E5E5E;">/</span>libRlapack.dylib</span>
<span id="cb4-7"></span>
<span id="cb4-8">locale<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb4-9">[<span class="dv" style="color: #AD0000;">1</span>] en_US.UTF<span class="dv" style="color: #AD0000;">-8</span><span class="sc" style="color: #5E5E5E;">/</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span><span class="sc" style="color: #5E5E5E;">/</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span><span class="sc" style="color: #5E5E5E;">/</span>C<span class="sc" style="color: #5E5E5E;">/</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span><span class="sc" style="color: #5E5E5E;">/</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">attached base packages<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb4-12">[<span class="dv" style="color: #AD0000;">1</span>] stats     graphics  grDevices datasets  utils     methods   base     </span>
<span id="cb4-13"></span>
<span id="cb4-14">other attached packages<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb4-15"> [<span class="dv" style="color: #AD0000;">1</span>] rsconnect_0.<span class="fl" style="color: #AD0000;">8.28</span>   leaflet_2.<span class="fl" style="color: #AD0000;">1.1</span>      DT_0<span class="fl" style="color: #AD0000;">.26</span>            thematic_0.<span class="dv" style="color: #AD0000;">1</span>.<span class="fl" style="color: #AD0000;">2.1</span>  </span>
<span id="cb4-16"> [<span class="dv" style="color: #AD0000;">5</span>] bslib_0.<span class="fl" style="color: #AD0000;">4.1</span>        shinyWidgets_0.<span class="fl" style="color: #AD0000;">7.4</span> scales_1.<span class="fl" style="color: #AD0000;">2.1</span>       showtext_0<span class="fl" style="color: #AD0000;">.9</span><span class="dv" style="color: #AD0000;">-5</span>    </span>
<span id="cb4-17"> [<span class="dv" style="color: #AD0000;">9</span>] showtextdb_3<span class="fl" style="color: #AD0000;">.0</span>     sysfonts_0.<span class="fl" style="color: #AD0000;">8.8</span>     ggplot2_3.<span class="fl" style="color: #AD0000;">3.6</span>      purrr_0.<span class="fl" style="color: #AD0000;">3.5</span>       </span>
<span id="cb4-18">[<span class="dv" style="color: #AD0000;">13</span>] dplyr_1.<span class="fl" style="color: #AD0000;">0.10</span>       rlang_1.<span class="fl" style="color: #AD0000;">0.6</span>        shiny_1.<span class="fl" style="color: #AD0000;">7.3</span>       </span>
<span id="cb4-19"></span>
<span id="cb4-20">loaded via a <span class="fu" style="color: #4758AB;">namespace</span> (and not attached)<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb4-21"> [<span class="dv" style="color: #AD0000;">1</span>] tidyselect_1.<span class="fl" style="color: #AD0000;">2.0</span>        splines_4.<span class="fl" style="color: #AD0000;">2.2</span>           lattice_0<span class="fl" style="color: #AD0000;">.20</span><span class="dv" style="color: #AD0000;">-45</span>        </span>
<span id="cb4-22"> [<span class="dv" style="color: #AD0000;">4</span>] leaflet.providers_1.<span class="fl" style="color: #AD0000;">9.0</span> colorspace_2<span class="fl" style="color: #AD0000;">.0</span><span class="dv" style="color: #AD0000;">-3</span>        vctrs_0.<span class="fl" style="color: #AD0000;">5.0</span>            </span>
<span id="cb4-23"> [<span class="dv" style="color: #AD0000;">7</span>] generics_0.<span class="fl" style="color: #AD0000;">1.3</span>          htmltools_0.<span class="fl" style="color: #AD0000;">5.3</span>         yaml_2.<span class="fl" style="color: #AD0000;">3.6</span>             </span>
<span id="cb4-24">[<span class="dv" style="color: #AD0000;">10</span>] mgcv_1<span class="fl" style="color: #AD0000;">.8</span><span class="dv" style="color: #AD0000;">-41</span>             utf8_1.<span class="fl" style="color: #AD0000;">2.2</span>              later_1.<span class="fl" style="color: #AD0000;">3.0</span>            </span>
<span id="cb4-25">[<span class="dv" style="color: #AD0000;">13</span>] pillar_1.<span class="fl" style="color: #AD0000;">8.1</span>            jquerylib_0.<span class="fl" style="color: #AD0000;">1.4</span>         glue_1.<span class="fl" style="color: #AD0000;">6.2</span>             </span>
<span id="cb4-26">[<span class="dv" style="color: #AD0000;">16</span>] withr_2.<span class="fl" style="color: #AD0000;">5.0</span>             lifecycle_1.<span class="fl" style="color: #AD0000;">0.3</span>         munsell_0.<span class="fl" style="color: #AD0000;">5.0</span>          </span>
<span id="cb4-27">[<span class="dv" style="color: #AD0000;">19</span>] gtable_0.<span class="fl" style="color: #AD0000;">3.1</span>            fontawesome_0.<span class="fl" style="color: #AD0000;">4.0</span>       htmlwidgets_1.<span class="fl" style="color: #AD0000;">5.4</span>      </span>
<span id="cb4-28">[<span class="dv" style="color: #AD0000;">22</span>] memoise_2.<span class="fl" style="color: #AD0000;">0.1</span>           labeling_0.<span class="fl" style="color: #AD0000;">4.2</span>          fastmap_1.<span class="fl" style="color: #AD0000;">1.0</span>          </span>
<span id="cb4-29">[<span class="dv" style="color: #AD0000;">25</span>] httpuv_1.<span class="fl" style="color: #AD0000;">6.6</span>            crosstalk_1.<span class="fl" style="color: #AD0000;">2.0</span>         fansi_1.<span class="fl" style="color: #AD0000;">0.3</span>            </span>
<span id="cb4-30">[<span class="dv" style="color: #AD0000;">28</span>] Rcpp_1.<span class="fl" style="color: #AD0000;">0.9</span>              xtable_1<span class="fl" style="color: #AD0000;">.8</span><span class="dv" style="color: #AD0000;">-4</span>            renv_0.<span class="fl" style="color: #AD0000;">16.0</span>            </span>
<span id="cb4-31">[<span class="dv" style="color: #AD0000;">31</span>] promises_1.<span class="dv" style="color: #AD0000;">2</span>.<span class="fl" style="color: #AD0000;">0.1</span>        cachem_1.<span class="fl" style="color: #AD0000;">0.6</span>            jsonlite_1.<span class="fl" style="color: #AD0000;">8.3</span>         </span>
<span id="cb4-32">[<span class="dv" style="color: #AD0000;">34</span>] mime_0<span class="fl" style="color: #AD0000;">.12</span>               farver_2.<span class="fl" style="color: #AD0000;">1.1</span>            fs_1.<span class="fl" style="color: #AD0000;">5.2</span>               </span>
<span id="cb4-33">[<span class="dv" style="color: #AD0000;">37</span>] digest_0.<span class="fl" style="color: #AD0000;">6.30</span>           grid_4.<span class="fl" style="color: #AD0000;">2.2</span>              cli_3.<span class="fl" style="color: #AD0000;">4.1</span>              </span>
<span id="cb4-34">[<span class="dv" style="color: #AD0000;">40</span>] tools_4.<span class="fl" style="color: #AD0000;">2.2</span>             magrittr_2.<span class="fl" style="color: #AD0000;">0.3</span>          sass_0.<span class="fl" style="color: #AD0000;">4.2</span>             </span>
<span id="cb4-35">[<span class="dv" style="color: #AD0000;">43</span>] tibble_3.<span class="fl" style="color: #AD0000;">1.8</span>            pkgconfig_2.<span class="fl" style="color: #AD0000;">0.3</span>         Matrix_1<span class="fl" style="color: #AD0000;">.5</span><span class="dv" style="color: #AD0000;">-1</span>           </span>
<span id="cb4-36">[<span class="dv" style="color: #AD0000;">46</span>] ellipsis_0.<span class="fl" style="color: #AD0000;">3.2</span>          rstudioapi_0<span class="fl" style="color: #AD0000;">.14</span>         R6_2.<span class="fl" style="color: #AD0000;">5.1</span>               </span>
<span id="cb4-37">[<span class="dv" style="color: #AD0000;">49</span>] nlme_3<span class="fl" style="color: #AD0000;">.1</span><span class="dv" style="color: #AD0000;">-160</span>            compiler_4.<span class="fl" style="color: #AD0000;">2.2</span>              </span></code></pre></div>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>shiny</category>
  <category>github</category>
  <category>bslib</category>
  <category>docker</category>
  <guid>https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/2022-11-15-shiny-bslib-demo.html</guid>
  <pubDate>Tue, 15 Nov 2022 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2022-11-15-shiny-bslib-demo/images/Shiny_Demo_Preview.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>Torch for R + luz</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-10-21-torch-for-r/2021-10-21-torch-for-r.html</link>
  <description><![CDATA[ 



<p>Torch for R… wow! 🔥🔥🔥 I was recently having a discussion with a coworker about the benefits of Torch, especially the power of training one global model capable of hierarchical projections (awesome for time series) and predicting multiple group-specific regressions. I went down a Googling rabbit hole last weekend and came across some amazing articles by Sigrid Keydana (see links below) introducing <code>torch</code> to the R community and also recently releasing <code>luz</code>, a high-level R interface to Torch (“<code>luz</code> is to <code>torch</code> what <code>Keras</code> is to <code>TensorFlow</code>”).</p>
<p>RStudio’s MLVerse team is doing really exciting things for the R machine learning and AI community. With <code>torch</code>, I no longer need to launch a conda environment for complex NNs (although having Python on your system is always handy 😅). And even better, “<code>torch</code> for R is built directly on top of <code>libtorch</code>, a C++ library that provides the tensor-computation and automatic-differentiation capabilities essential to building neural networks.” If you’re looking for fast NNs and deep learning solutions within the <strong>#rstats</strong> framework, give these packages a try. Happy Friday and happy learning! 🤓📚</p>
<section id="sources" class="level2">
<h2 class="anchored" data-anchor-id="sources">Sources</h2>
<ul>
<li>Torch for R: <a href="https://torch.mlverse.org/">https://torch.mlverse.org/</a></li>
<li>Intro to Torch: <a href="https://blogs.rstudio.com/ai/posts/2020-09-29-introducing-torch-for-r/">Torch for R</a></li>
<li>Intro to Luz: <a href="https://blogs.rstudio.com/ai/posts/2021-06-17-luz/">Que haja luz: More light for torch!</a></li>
<li>Intro to TabNet: <a href="https://blogs.rstudio.com/ai/posts/2021-02-11-tabnet/">TabNet for Tabular Data with Torch</a></li>
<li>Intro to Time Series with Torch: <a href="https://blogs.rstudio.com/ai/posts/2021-03-10-forecasting-time-series-with-torch_1/">Introductory Time-Series Forecasting with Torch</a></li>
<li>Sigrid Keydana: <a href="https://www.linkedin.com/in/sigrid-keydana-9a16b410/?originalSubdomain=de">Sigrid on LinkedIn</a></li>
</ul>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>machine learning</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-10-21-torch-for-r/2021-10-21-torch-for-r.html</guid>
  <pubDate>Fri, 22 Oct 2021 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-10-21-torch-for-r/images/torch_and_luz.png" medium="image" type="image/png" height="91" width="144"/>
</item>
<item>
  <title>Beautiful Maps with Rayshader</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/2021-09-07-rayshader.html</link>
  <description><![CDATA[ 



<section id="overview" class="level1">
<h1>Overview</h1>
<p>R, <code>rayshader</code>, OpenStreetMap… Lots of amazing learning to be had with these mapping tools. I’m following Tyler Morgan-Wall PhD’s <a href="https://www.tylermw.com/adding-open-street-map-data-to-rayshader-maps-in-r/">Adding Open Street Map Data to Rayshader Maps in R</a> tutorial and learning a lot about the development of beautiful maps with R. Laguna Beach is one of my favorite cities in the USA (<em>and the world!</em>) so I applied the concepts from this tutorial to building 2D and 3D maps of Laguna Beach. My work-in-progress and screen captures are below.</p>
<p>Tyler Morgan-Wall PhD (TMW) authored the <code>rayshader</code> package and his step-by-step tutorial is both easy to follow and incredibly informative. If you get stuck (<em>more like, “when you get stuck”</em>), you can almost always find an answer on the <code>rayshader</code> website or GitHub repo (excellent technical documentation and code examples).</p>
<p>One last caveat before I dive into my code - Finding high-quality LIDAR or Digital Elevation Models (DEMs) for United States cities is <em>not easy</em>. To apply the steps below to your location of choice, you’ll have to get creative about cropping LIDAR/DEMs to zoom into the geography that you want to model (more info on cropping in the sections below).</p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>Where do you start? Find yourself a high-resolution DEM or LIDAR capture of a location that you love. The team at <a href="https://shadedrelief.com/">Shaded Relief</a> has some high-res DEMs for public consumption: <a href="http://shadedrelief.com/SampleElevationModels/">http://shadedrelief.com/SampleElevationModels/</a></p>
<p>My starting point was a LIDAR capture of Laguna Canyon in California. This geo-data, made available by the United States Geological Survey’s <a href="https://ngmdb.usgs.gov/topoView/">National Geologic Map Database</a>, was captured in 2018 as part of a study on Southern California wildfires. The LIDAR image (captured as a TIF file) includes three variables per observation: latitude, longitude, and elevation. This Laguna Canyon LIDAR image captures these data points in one meter increments (hence the 257 MB file size). You can download this TIF from my Google Drive here: <a href="https://drive.google.com/file/d/1IfdYa0nYYk7_n1McV5IRhgk-rXJtLA9P/view?usp=sharing">https://drive.google.com/Javier/USGS_TIF</a></p>
<p>Start by installing the development versions of the <code>rayshader</code> and <code>rayimage</code> packages, and loading several others packages used in this project. I run Ubuntu and experienced some dependency issues, at least initially. If you can Google Search, you can figure out the additional Linux libraries that you might need (my apologies for not documenting this better! - I worked on this code in March but just now getting around to documenting my workflow… <em>in September!</em>).</p>
<section id="libraries" class="level2">
<h2 class="anchored" data-anchor-id="libraries">Libraries</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Install dev packages</span></span>
<span id="cb1-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"tylermorganwall/rayshader"</span>)</span>
<span id="cb1-3">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"tylermorganwall/rayimage"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Load libraries</span></span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(rayshader)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(raster)</span>
<span id="cb1-8"><span class="fu" style="color: #4758AB;">library</span>(osmdata)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">library</span>(sf)</span>
<span id="cb1-10"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;"># Source elevation data</span></span>
<span id="cb1-14">laguna <span class="ot" style="color: #003B4F;">&lt;-</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster</span>(<span class="st" style="color: #20794D;">"./USGS_one_meter_x42y372_CA_SoCal_Wildfires_B1_2018.tif"</span>)</span></code></pre></div>
</div>
</section>
<section id="eda" class="level2">
<h2 class="anchored" data-anchor-id="eda">EDA</h2>
<p>To better explore the data, lets begin by visualizing the elevation data with <code>rayshader</code> defaults to understand the topography that we are working with. Before we can render this visual, we need to transform the <strong>laguna</strong> data object (assigned above) to a matrix. For faster rendering and prototyping, you can also resize the matrix using <code>rayshader::resize_matrix()</code>. This resizing will downscale your full dataset using bilinear interpolation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Transform the spatial data structure into a regular R matrix</span></span>
<span id="cb2-2">laguna_mat <span class="ot" style="color: #003B4F;">&lt;-</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(laguna)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;"># Create small version of matrix for quick visual prototyping</span></span>
<span id="cb2-5">laguna_small <span class="ot" style="color: #003B4F;">&lt;-</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">resize_matrix</span>(laguna_mat, <span class="fl" style="color: #AD0000;">0.1</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;"># Plot base map using basic color defaults</span></span>
<span id="cb2-8">laguna_small <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">height_shade</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_map</span>()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/laguna_lidar.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">USGS Laguna Canyon LIDAR</figcaption><p></p>
</figure>
</div>
</section>
<section id="cropping" class="level2">
<h2 class="anchored" data-anchor-id="cropping">Cropping</h2>
<p>I wanted to focus on downtown Laguna Beach but this only represents a small fraction of the raw LIDAR. To get the desired lat-long range of downtown Laguna Beach, I used Google Maps to get the endpoints of my desired box. To accomplish this cropping, below, we relied on a custom cropping function that TMW shared on the <code>rayshader</code> site.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;"># Crop to fit desired box around downtown Laguna Beach</span></span>
<span id="cb3-2">lat_range <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">33.541370925562376</span>, <span class="fl" style="color: #AD0000;">33.55945552155357</span>)</span>
<span id="cb3-3">long_range <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">117.79622401045448</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="fl" style="color: #AD0000;">117.77493476466955</span>)</span>
<span id="cb3-4"></span>
<span id="cb3-5">convert_coords <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(lat, long, <span class="at" style="color: #657422;">from =</span> <span class="fu" style="color: #4758AB;">CRS</span>(<span class="st" style="color: #20794D;">"+init=epsg:4326"</span>), to) {</span>
<span id="cb3-6">  data <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">data.frame</span>(<span class="at" style="color: #657422;">long =</span> long, <span class="at" style="color: #657422;">lat =</span> lat)</span>
<span id="cb3-7">  sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">coordinates</span>(data) <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="er" style="color: #AD0000;">~</span> long <span class="sc" style="color: #5E5E5E;">+</span> lat</span>
<span id="cb3-8">  sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">proj4string</span>(data) <span class="ot" style="color: #003B4F;">=</span> from</span>
<span id="cb3-9">  <span class="co" style="color: #5E5E5E;"># Convert to coordinate system specified by EPSG code</span></span>
<span id="cb3-10">  xy <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">data.frame</span>(sp<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">spTransform</span>(data, to))</span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">colnames</span>(xy) <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"x"</span>,<span class="st" style="color: #20794D;">"y"</span>)</span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;">return</span>(<span class="fu" style="color: #4758AB;">unlist</span>(xy))</span>
<span id="cb3-13">}</span>
<span id="cb3-14"></span>
<span id="cb3-15">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crs</span>(laguna)</span>
<span id="cb3-16"></span>
<span id="cb3-17">utm_bbox <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">convert_coords</span>(<span class="at" style="color: #657422;">lat =</span> lat_range,</span>
<span id="cb3-18">                           <span class="at" style="color: #657422;">long =</span> long_range,</span>
<span id="cb3-19">                           <span class="at" style="color: #657422;">to =</span> <span class="fu" style="color: #4758AB;">crs</span>(laguna))</span>
<span id="cb3-20"></span>
<span id="cb3-21">raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">extent</span>(laguna)</span>
<span id="cb3-22"></span>
<span id="cb3-23">extent_zoomed <span class="ot" style="color: #003B4F;">&lt;-</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">extent</span>(utm_bbox[<span class="dv" style="color: #AD0000;">1</span>], utm_bbox[<span class="dv" style="color: #AD0000;">2</span>], </span>
<span id="cb3-24">                                utm_bbox[<span class="dv" style="color: #AD0000;">3</span>], utm_bbox[<span class="dv" style="color: #AD0000;">4</span>])h</span>
<span id="cb3-25"></span>
<span id="cb3-26">laguna_zoom <span class="ot" style="color: #003B4F;">&lt;-</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crop</span>(laguna, extent_zoomed)</span>
<span id="cb3-27"></span>
<span id="cb3-28">laguna_zoom_mat <span class="ot" style="color: #003B4F;">&lt;-</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">raster_to_matrix</span>(laguna_zoom)</span></code></pre></div>
</div>
</section>
</section>
<section id="d-map" class="level1">
<h1>2D Map</h1>
<section id="base-map" class="level2">
<h2 class="anchored" data-anchor-id="base-map">Base Map</h2>
<p>I was inspired by the relief shading work of Eduard Imhof, Swiss cartographer and mapping visionary. In particular, I loved the blueish-pink palette that Imhof popularized. When you get to this step, try adjusting the settings below to your liking. We will continue to build on top of this initial base map layer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">base_map <span class="ot" style="color: #003B4F;">&lt;-</span> laguna_zoom_mat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-2">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">height_shade</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-3">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb4-4">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">sphere_shade</span>(</span>
<span id="cb4-5">      laguna_zoom_mat, </span>
<span id="cb4-6">      <span class="at" style="color: #657422;">texture =</span> rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">create_texture</span>(<span class="st" style="color: #20794D;">"#f5dfca"</span>,<span class="st" style="color: #20794D;">"#63372c"</span>,<span class="st" style="color: #20794D;">"#dfa283"</span>,<span class="st" style="color: #20794D;">"#195f67"</span>,<span class="st" style="color: #20794D;">"#c2d1cf"</span>,</span>
<span id="cb4-7">                                          <span class="at" style="color: #657422;">cornercolors =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"#ffc500"</span>, <span class="st" style="color: #20794D;">"#387642"</span>, <span class="st" style="color: #20794D;">"#d27441"</span>,<span class="st" style="color: #20794D;">"#296176"</span>)),</span>
<span id="cb4-8">      <span class="at" style="color: #657422;">sunangle =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb4-9">      <span class="at" style="color: #657422;">colorintensity =</span> <span class="dv" style="color: #AD0000;">5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-10">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_shadow</span>(rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">lamb_shade</span>(laguna_zoom_mat), <span class="fl" style="color: #AD0000;">0.2</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-11">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb4-12">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_altitude_overlay</span>(</span>
<span id="cb4-13">      rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">height_shade</span>(laguna_zoom_mat, <span class="at" style="color: #657422;">texture =</span> <span class="st" style="color: #20794D;">"#91aaba"</span>),</span>
<span id="cb4-14">      laguna_zoom_mat,</span>
<span id="cb4-15">      <span class="at" style="color: #657422;">start_transition =</span> <span class="fu" style="color: #4758AB;">min</span>(laguna_zoom_mat)<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">200</span>,</span>
<span id="cb4-16">      <span class="at" style="color: #657422;">end_transition =</span> <span class="fu" style="color: #4758AB;">max</span>(laguna_zoom_mat)))</span>
<span id="cb4-17"></span>
<span id="cb4-18">rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_map</span>(base_map)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/base_map.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Laguna Beach base map a la Eduard Imhof</figcaption><p></p>
</figure>
</div>
</section>
<section id="openstreetmap" class="level2">
<h2 class="anchored" data-anchor-id="openstreetmap">OpenStreetMap</h2>
<p>OpenStreetMap (OSM) offers an open-source, editable geographic database of the world and the underlying data includes details for roads, buildings, hiking paths, rivers, etc. We’ll leverage the <code>osmdata</code> package for R to import OSM data (and utilizing the <code>overpass</code> API). The <code>osmdata</code> package processes routines in C++ for fast construction and loading into R. We’ll first load several layers of OSM details. Subsequently, we’ll convert those <code>sf</code> objects to the coordinate system we’re working with for this <code>rayshader</code> project.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">osm_bbox <span class="ot" style="color: #003B4F;">=</span> <span class="fu" style="color: #4758AB;">c</span>(long_range[<span class="dv" style="color: #AD0000;">1</span>],lat_range[<span class="dv" style="color: #AD0000;">1</span>], long_range[<span class="dv" style="color: #AD0000;">2</span>],lat_range[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb5-2"></span>
<span id="cb5-3">laguna_highway <span class="ot" style="color: #003B4F;">&lt;-</span> osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">opq</span>(osm_bbox) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_osm_feature</span>(<span class="st" style="color: #20794D;">"highway"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">osmdata_sf</span>() </span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># Transform coordinates to new projection</span></span>
<span id="cb5-8">laguna_lines <span class="ot" style="color: #003B4F;">&lt;-</span> sf<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">st_transform</span>(laguna_highway<span class="sc" style="color: #5E5E5E;">$</span>osm_lines,</span>
<span id="cb5-9">                                 <span class="at" style="color: #657422;">crs =</span> raster<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crs</span>(laguna))</span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;"># View streets as a ggplot2 render </span></span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;">ggplot</span>(laguna_lines, <span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">color =</span> osm_id)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb5-13">  <span class="fu" style="color: #4758AB;">geom_sf</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">"none"</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Open Street Map `highway` attribute in Laguna Beach"</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/OSM_ggplot2_render.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">OSM render of Laguna Beach roads and highways using ggplot2</figcaption><p></p>
</figure>
</div>
</section>
<section id="layering" class="level2">
<h2 class="anchored" data-anchor-id="layering">Layering</h2>
<p>To begin, lets simply layer all the “highway” OSM attributes on top of our base map using white lines to represent the lines.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># Transform sf LINESTRING geometry and create semi-transparent overlay</span></span>
<span id="cb6-2">base_map <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb6-4">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_line_overlay</span>(</span>
<span id="cb6-5">      laguna_lines, <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb6-6">      <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb6-7">      <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-8">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_map</span>()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/base_map_layer1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Base Map Layer 1</figcaption><p></p>
</figure>
</div>
<p>I want different styles for different OSM lines so let’s continue by creating several groups of OSM lines.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;"># Subset layers of laguna_lines</span></span>
<span id="cb7-2">laguna_trails <span class="ot" style="color: #003B4F;">&lt;-</span> laguna_lines <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-3">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(highway <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"path"</span>, <span class="st" style="color: #20794D;">"bridleway"</span>, <span class="st" style="color: #20794D;">"steps"</span>, <span class="st" style="color: #20794D;">"track"</span>))</span>
<span id="cb7-4"></span>
<span id="cb7-5">laguna_footpaths <span class="ot" style="color: #003B4F;">&lt;-</span> laguna_lines <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-6">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(highway <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"footway"</span>))</span>
<span id="cb7-7"></span>
<span id="cb7-8">laguna_roads <span class="ot" style="color: #003B4F;">&lt;-</span> laguna_lines <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb7-9">  dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">filter</span>(highway <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"unclassified"</span>, <span class="st" style="color: #20794D;">"primary"</span>, </span>
<span id="cb7-10">                               <span class="st" style="color: #20794D;">"primary_link"</span>, <span class="st" style="color: #20794D;">"secondary"</span>, </span>
<span id="cb7-11">                               <span class="st" style="color: #20794D;">"tertiary"</span>, <span class="st" style="color: #20794D;">"residential"</span>, <span class="st" style="color: #20794D;">"service"</span>))</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;"># Create one encompassing layer with independent element styling</span></span>
<span id="cb7-14">trails_layer <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb7-15">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_line_overlay</span>(</span>
<span id="cb7-16">    </span>
<span id="cb7-17">    <span class="co" style="color: #5E5E5E;"># Pink footpaths</span></span>
<span id="cb7-18">    laguna_footpaths, <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb7-19">    <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"pink"</span>,</span>
<span id="cb7-20">    <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-21">  </span>
<span id="cb7-22">  <span class="co" style="color: #5E5E5E;"># Note: While barely visible in the final outputs, the following</span></span>
<span id="cb7-23">  <span class="co" style="color: #5E5E5E;"># code adds an offset black shadow to the white dashed lines to</span></span>
<span id="cb7-24">  <span class="co" style="color: #5E5E5E;"># represent the hiking trails around Laguna Beach </span></span>
<span id="cb7-25">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb7-26">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_line_overlay</span>(</span>
<span id="cb7-27">      laguna_trails, <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb7-28">      <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"black"</span>, <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">offset =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">2</span>,<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb7-29">      <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-30">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb7-31">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_line_overlay</span>(</span>
<span id="cb7-32">      laguna_trails, <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb7-33">      <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">4</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">lty =</span> <span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb7-34">      <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-35">  </span>
<span id="cb7-36">  <span class="co" style="color: #5E5E5E;"># White roads</span></span>
<span id="cb7-37">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb7-38">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_line_overlay</span>(</span>
<span id="cb7-39">      laguna_roads, <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb7-40">      <span class="at" style="color: #657422;">linewidth =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">color =</span> <span class="st" style="color: #20794D;">"white"</span>,</span>
<span id="cb7-41">      <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat))</span></code></pre></div>
</div>
<p>We’ll create some additional projections of OSM layers.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">laguna_parking <span class="ot" style="color: #003B4F;">&lt;-</span> osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">opq</span>(osm_bbox) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_osm_feature</span>(<span class="st" style="color: #20794D;">"parking"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">osmdata_sf</span>() </span>
<span id="cb8-4"></span>
<span id="cb8-5">laguna_building <span class="ot" style="color: #003B4F;">&lt;-</span> osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">opq</span>(osm_bbox) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_osm_feature</span>(<span class="st" style="color: #20794D;">"building"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-7">  osmdata<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">osmdata_sf</span>()</span>
<span id="cb8-8"></span>
<span id="cb8-9">laguna_parking_poly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st_transform</span>(laguna_parking<span class="sc" style="color: #5E5E5E;">$</span>osm_polygons, <span class="at" style="color: #657422;">crs =</span> <span class="fu" style="color: #4758AB;">crs</span>(laguna))</span>
<span id="cb8-10">laguna_building_poly <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">st_transform</span>(laguna_building<span class="sc" style="color: #5E5E5E;">$</span>osm_polygons, <span class="at" style="color: #657422;">crs =</span> <span class="fu" style="color: #4758AB;">crs</span>(laguna))</span></code></pre></div>
</div>
</section>
<section id="final-touches" class="level2">
<h2 class="anchored" data-anchor-id="final-touches">Final Touches</h2>
<p>Now we’re ready to build upon our base map and see the 2D visual in action. Let’s create a polygon layer of the parking and building features, and adding the styled <strong>trails_layer</strong> on top of that.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">polygon_layer <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb9-2">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_polygon_overlay</span>(laguna_parking_poly, </span>
<span id="cb9-3">                                      <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb9-4">                                      <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat, </span>
<span id="cb9-5">                                      <span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"grey30"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-6">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(</span>
<span id="cb9-7">    rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">generate_polygon_overlay</span>(laguna_building_poly, </span>
<span id="cb9-8">                                        <span class="at" style="color: #657422;">extent =</span> extent_zoomed,</span>
<span id="cb9-9">                                        <span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat, </span>
<span id="cb9-10">                                        <span class="at" style="color: #657422;">palette =</span> <span class="st" style="color: #20794D;">"lightgrey"</span>))</span>
<span id="cb9-11"></span>
<span id="cb9-12">base_map <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-13">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(polygon_layer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-14">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(trails_layer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-15">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_map</span>()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/2D_render.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">2D render of Laguna Beach… Success!</figcaption><p></p>
</figure>
</div>
</section>
</section>
<section id="d-map-1" class="level1">
<h1>3D Map</h1>
<section id="features" class="level2">
<h2 class="anchored" data-anchor-id="features">Features</h2>
<p>To render a 3D map, we follow a very similar pipeline to the 2D map but utilizing <code>rayshader::plot_3d()</code>. This function introduces new arguments and I spent much more time than I had anticipated in adjusting the zscale, zoom, rotation, pitch, and water specifications.</p>
<p>To exaggerate the elevation details in this area, I decided on a <code>zscale</code> &lt; 1 that would still resemble the reality and beauty of the Laguna Beach hills. Too low of a <code>zscale</code>, e.g., <code>zscale = 0.25</code>, was too exaggerated for my liking. Once the 3D viewer renders your visual, enter <code>rayshader::render_snapshot()</code> into your console to take a flat snapshot of your 3D rendering, saving your snapshot if desired.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">base_map <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-2">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(polygon_layer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-3">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">add_overlay</span>(trails_layer) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-4">  rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">plot_3d</span>(<span class="at" style="color: #657422;">heightmap =</span> laguna_zoom_mat, </span>
<span id="cb10-5">                     <span class="at" style="color: #657422;">zscale =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #657422;">fov =</span> <span class="dv" style="color: #AD0000;">0</span>, </span>
<span id="cb10-6">                     <span class="at" style="color: #657422;">theta =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">45</span>, <span class="at" style="color: #657422;">zoom =</span> <span class="fl" style="color: #AD0000;">0.75</span>, <span class="at" style="color: #657422;">phi =</span> <span class="dv" style="color: #AD0000;">45</span>,</span>
<span id="cb10-7">                     <span class="at" style="color: #657422;">water =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">waterdepth =</span> <span class="dv" style="color: #AD0000;">4</span>, </span>
<span id="cb10-8">                     <span class="at" style="color: #657422;">wateralpha =</span> <span class="fl" style="color: #AD0000;">0.4</span>, <span class="at" style="color: #657422;">watercolor =</span> <span class="st" style="color: #20794D;">"lightblue"</span>,</span>
<span id="cb10-9">                     <span class="at" style="color: #657422;">waterlinecolor =</span> <span class="st" style="color: #20794D;">"white"</span>, <span class="at" style="color: #657422;">waterlinealpha =</span> <span class="fl" style="color: #AD0000;">0.5</span>,</span>
<span id="cb10-10">                     <span class="at" style="color: #657422;">background =</span> <span class="st" style="color: #20794D;">"white"</span>)</span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># Create 2D snapshot of 3D rendering</span></span>
<span id="cb10-13">rayshader<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">render_snapshot</span>()</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/3D_render.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">3D render of Laguna Beach</figcaption><p></p>
</figure>
</div>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>I’ve seen some neat examples where developers add 3D polygons to their maps to represent residential housing, commercial properties, and public facilities. I recently read about methods for rendering much higher-resolution maps (this would be great for printing). Creating 3D flyovers with <code>rayshader</code> also looks surprisingly high-end for open-source software. These are all things I hope to revisit at some point in the near future. TMW knocked it out of the park with his package and tutorials, so I hope you find his content as useful as I did.</p>
</section>
<section id="session-info" class="level2">
<h2 class="anchored" data-anchor-id="session-info">Session Info</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">R version <span class="dv" style="color: #AD0000;">4</span>.<span class="fl" style="color: #AD0000;">1.1</span> (<span class="dv" style="color: #AD0000;">2021-08-10</span>)</span>
<span id="cb11-2">Platform<span class="sc" style="color: #5E5E5E;">:</span> x86_64<span class="sc" style="color: #5E5E5E;">-</span>pc<span class="sc" style="color: #5E5E5E;">-</span>linux<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">gnu</span> (<span class="dv" style="color: #AD0000;">64</span><span class="sc" style="color: #5E5E5E;">-</span>bit)</span>
<span id="cb11-3">Running under<span class="sc" style="color: #5E5E5E;">:</span> Ubuntu <span class="dv" style="color: #AD0000;">20</span>.<span class="fl" style="color: #AD0000;">04.3</span> LTS</span>
<span id="cb11-4"></span>
<span id="cb11-5">Matrix products<span class="sc" style="color: #5E5E5E;">:</span> default</span>
<span id="cb11-6">BLAS<span class="sc" style="color: #5E5E5E;">:</span>   <span class="er" style="color: #AD0000;">/</span>usr<span class="sc" style="color: #5E5E5E;">/</span>lib<span class="sc" style="color: #5E5E5E;">/</span>x86_64<span class="sc" style="color: #5E5E5E;">-</span>linux<span class="sc" style="color: #5E5E5E;">-</span>gnu<span class="sc" style="color: #5E5E5E;">/</span>blas<span class="sc" style="color: #5E5E5E;">/</span>libblas.so.<span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.0</span></span>
<span id="cb11-7">LAPACK<span class="sc" style="color: #5E5E5E;">:</span> <span class="er" style="color: #AD0000;">/</span>usr<span class="sc" style="color: #5E5E5E;">/</span>lib<span class="sc" style="color: #5E5E5E;">/</span>x86_64<span class="sc" style="color: #5E5E5E;">-</span>linux<span class="sc" style="color: #5E5E5E;">-</span>gnu<span class="sc" style="color: #5E5E5E;">/</span>lapack<span class="sc" style="color: #5E5E5E;">/</span>liblapack.so.<span class="dv" style="color: #AD0000;">3</span>.<span class="fl" style="color: #AD0000;">9.0</span></span>
<span id="cb11-8"></span>
<span id="cb11-9">locale<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb11-10"> [<span class="dv" style="color: #AD0000;">1</span>] LC_CTYPE<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>       LC_NUMERIC<span class="ot" style="color: #003B4F;">=</span>C              </span>
<span id="cb11-11"> [<span class="dv" style="color: #AD0000;">3</span>] LC_TIME<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>        LC_COLLATE<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>    </span>
<span id="cb11-12"> [<span class="dv" style="color: #AD0000;">5</span>] LC_MONETARY<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>    LC_MESSAGES<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>   </span>
<span id="cb11-13"> [<span class="dv" style="color: #AD0000;">7</span>] LC_PAPER<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span>       LC_NAME<span class="ot" style="color: #003B4F;">=</span>C                 </span>
<span id="cb11-14"> [<span class="dv" style="color: #AD0000;">9</span>] LC_ADDRESS<span class="ot" style="color: #003B4F;">=</span>C               LC_TELEPHONE<span class="ot" style="color: #003B4F;">=</span>C            </span>
<span id="cb11-15">[<span class="dv" style="color: #AD0000;">11</span>] LC_MEASUREMENT<span class="ot" style="color: #003B4F;">=</span>en_US.UTF<span class="dv" style="color: #AD0000;">-8</span> LC_IDENTIFICATION<span class="ot" style="color: #003B4F;">=</span>C       </span>
<span id="cb11-16"></span>
<span id="cb11-17">attached base packages<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb11-18">[<span class="dv" style="color: #AD0000;">1</span>] stats     graphics  grDevices utils     datasets  methods   base     </span>
<span id="cb11-19"></span>
<span id="cb11-20">other attached packages<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb11-21">[<span class="dv" style="color: #AD0000;">1</span>] ggplot2_3.<span class="fl" style="color: #AD0000;">3.5</span>    dplyr_1.<span class="fl" style="color: #AD0000;">0.7</span>      sf_1<span class="fl" style="color: #AD0000;">.0</span><span class="dv" style="color: #AD0000;">-2</span>         osmdata_0.<span class="fl" style="color: #AD0000;">1.6</span>   </span>
<span id="cb11-22">[<span class="dv" style="color: #AD0000;">5</span>] raster_3<span class="fl" style="color: #AD0000;">.4</span><span class="dv" style="color: #AD0000;">-13</span>    sp_1<span class="fl" style="color: #AD0000;">.4</span><span class="dv" style="color: #AD0000;">-5</span>         rayshader_0.<span class="fl" style="color: #AD0000;">26.1</span></span>
<span id="cb11-23"></span>
<span id="cb11-24">loaded via a <span class="fu" style="color: #4758AB;">namespace</span> (and not attached)<span class="sc" style="color: #5E5E5E;">:</span></span>
<span id="cb11-25"> [<span class="dv" style="color: #AD0000;">1</span>] rgl_0.<span class="fl" style="color: #AD0000;">107.14</span>       Rcpp_1.<span class="fl" style="color: #AD0000;">0.7</span>         lubridate_1.<span class="fl" style="color: #AD0000;">7.10</span>   lattice_0<span class="fl" style="color: #AD0000;">.20</span><span class="dv" style="color: #AD0000;">-44</span>   </span>
<span id="cb11-26"> [<span class="dv" style="color: #AD0000;">5</span>] png_0<span class="fl" style="color: #AD0000;">.1</span><span class="dv" style="color: #AD0000;">-7</span>          prettyunits_1.<span class="fl" style="color: #AD0000;">1.1</span>  class_7<span class="fl" style="color: #AD0000;">.3</span><span class="dv" style="color: #AD0000;">-19</span>       ps_1.<span class="fl" style="color: #AD0000;">6.0</span>          </span>
<span id="cb11-27"> [<span class="dv" style="color: #AD0000;">9</span>] assertthat_0.<span class="fl" style="color: #AD0000;">2.1</span>   rprojroot_2.<span class="fl" style="color: #AD0000;">0.2</span>    digest_0.<span class="fl" style="color: #AD0000;">6.27</span>      foreach_1.<span class="fl" style="color: #AD0000;">5.1</span>     </span>
<span id="cb11-28">[<span class="dv" style="color: #AD0000;">13</span>] utf8_1.<span class="fl" style="color: #AD0000;">2.2</span>         R6_2.<span class="fl" style="color: #AD0000;">5.1</span>           e1071_1<span class="fl" style="color: #AD0000;">.7</span><span class="dv" style="color: #AD0000;">-8</span>        httr_1.<span class="fl" style="color: #AD0000;">4.2</span>        </span>
<span id="cb11-29">[<span class="dv" style="color: #AD0000;">17</span>] pillar_1.<span class="fl" style="color: #AD0000;">6.2</span>       rlang_0.<span class="fl" style="color: #AD0000;">4.11</span>       progress_1.<span class="fl" style="color: #AD0000;">2.2</span>     curl_4.<span class="fl" style="color: #AD0000;">3.2</span>        </span>
<span id="cb11-30">[<span class="dv" style="color: #AD0000;">21</span>] callr_3.<span class="fl" style="color: #AD0000;">7.0</span>        magick_2.<span class="fl" style="color: #AD0000;">7.3</span>       pkgdown_1.<span class="fl" style="color: #AD0000;">6.1</span>      desc_1.<span class="fl" style="color: #AD0000;">3.0</span>        </span>
<span id="cb11-31">[<span class="dv" style="color: #AD0000;">25</span>] devtools_2.<span class="fl" style="color: #AD0000;">4.2</span>     rgdal_1<span class="fl" style="color: #AD0000;">.5</span><span class="dv" style="color: #AD0000;">-23</span>       htmlwidgets_1.<span class="fl" style="color: #AD0000;">5.3</span>  munsell_0.<span class="fl" style="color: #AD0000;">5.0</span>     </span>
<span id="cb11-32">[<span class="dv" style="color: #AD0000;">29</span>] proxy_0<span class="fl" style="color: #AD0000;">.4</span><span class="dv" style="color: #AD0000;">-26</span>       compiler_4.<span class="fl" style="color: #AD0000;">1.1</span>     xfun_0<span class="fl" style="color: #AD0000;">.25</span>          pkgconfig_2.<span class="fl" style="color: #AD0000;">0.3</span>   </span>
<span id="cb11-33">[<span class="dv" style="color: #AD0000;">33</span>] pkgbuild_1.<span class="fl" style="color: #AD0000;">2.0</span>     htmltools_0.<span class="fl" style="color: #AD0000;">5.2</span>    tidyselect_1.<span class="fl" style="color: #AD0000;">1.1</span>   tibble_3.<span class="fl" style="color: #AD0000;">1.4</span>      </span>
<span id="cb11-34">[<span class="dv" style="color: #AD0000;">37</span>] codetools_0<span class="fl" style="color: #AD0000;">.2</span><span class="dv" style="color: #AD0000;">-18</span>   fansi_0.<span class="fl" style="color: #AD0000;">5.0</span>        crayon_1.<span class="fl" style="color: #AD0000;">4.1</span>       withr_2.<span class="fl" style="color: #AD0000;">4.2</span>       </span>
<span id="cb11-35">[<span class="dv" style="color: #AD0000;">41</span>] grid_4.<span class="fl" style="color: #AD0000;">1.1</span>         gtable_0.<span class="fl" style="color: #AD0000;">3.0</span>       jsonlite_1.<span class="fl" style="color: #AD0000;">7.2</span>     lifecycle_1.<span class="fl" style="color: #AD0000;">0.0</span>   </span>
<span id="cb11-36">[<span class="dv" style="color: #AD0000;">45</span>] DBI_1.<span class="fl" style="color: #AD0000;">1.1</span>          magrittr_2.<span class="fl" style="color: #AD0000;">0.1</span>     scales_1.<span class="fl" style="color: #AD0000;">1.1</span>       units_0<span class="fl" style="color: #AD0000;">.7</span><span class="dv" style="color: #AD0000;">-2</span>       </span>
<span id="cb11-37">[<span class="dv" style="color: #AD0000;">49</span>] KernSmooth_2<span class="fl" style="color: #AD0000;">.23</span><span class="dv" style="color: #AD0000;">-20</span> cli_3.<span class="fl" style="color: #AD0000;">0.1</span>          cachem_1.<span class="fl" style="color: #AD0000;">0.6</span>       farver_2.<span class="fl" style="color: #AD0000;">1.0</span>      </span>
<span id="cb11-38">[<span class="dv" style="color: #AD0000;">53</span>] fs_1.<span class="fl" style="color: #AD0000;">5.0</span>           remotes_2.<span class="fl" style="color: #AD0000;">4.0</span>      doParallel_1.<span class="fl" style="color: #AD0000;">0.16</span>  testthat_3.<span class="fl" style="color: #AD0000;">0.4</span>    </span>
<span id="cb11-39">[<span class="dv" style="color: #AD0000;">57</span>] xml2_1.<span class="fl" style="color: #AD0000;">3.2</span>         ellipsis_0.<span class="fl" style="color: #AD0000;">3.2</span>     generics_0.<span class="fl" style="color: #AD0000;">1.0</span>     vctrs_0.<span class="fl" style="color: #AD0000;">3.8</span>       </span>
<span id="cb11-40">[<span class="dv" style="color: #AD0000;">61</span>] iterators_1.<span class="fl" style="color: #AD0000;">0.13</span>   tools_4.<span class="fl" style="color: #AD0000;">1.1</span>        rayimage_0.<span class="fl" style="color: #AD0000;">6.2</span>     glue_1.<span class="fl" style="color: #AD0000;">4.2</span>        </span>
<span id="cb11-41">[<span class="dv" style="color: #AD0000;">65</span>] purrr_0.<span class="fl" style="color: #AD0000;">3.4</span>        hms_1.<span class="fl" style="color: #AD0000;">1.0</span>          processx_3.<span class="fl" style="color: #AD0000;">5.2</span>     pkgload_1.<span class="fl" style="color: #AD0000;">2.1</span>     </span>
<span id="cb11-42">[<span class="dv" style="color: #AD0000;">69</span>] parallel_4.<span class="fl" style="color: #AD0000;">1.1</span>     fastmap_1.<span class="fl" style="color: #AD0000;">1.0</span>      colorspace_2<span class="fl" style="color: #AD0000;">.0</span><span class="dv" style="color: #AD0000;">-2</span>   sessioninfo_1.<span class="fl" style="color: #AD0000;">1.1</span> </span>
<span id="cb11-43">[<span class="dv" style="color: #AD0000;">73</span>] classInt_0<span class="fl" style="color: #AD0000;">.4</span><span class="dv" style="color: #AD0000;">-3</span>     rvest_1.<span class="fl" style="color: #AD0000;">0.1</span>        memoise_2.<span class="fl" style="color: #AD0000;">0.0</span>      knitr_1<span class="fl" style="color: #AD0000;">.33</span>        </span>
<span id="cb11-44">[<span class="dv" style="color: #AD0000;">77</span>] usethis_2.<span class="fl" style="color: #AD0000;">0.1</span>     </span></code></pre></div>
</div>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<ul>
<li>rayshader: <a href="https://www.rayshader.com/">https://www.rayshader.com/</a></li>
<li>rayrender: <a href="http://www.rayrender.net/">http://www.rayrender.net/</a></li>
<li>Tyler Morgan-Wall, PhD: <a href="https://www.tylermw.com/">https://www.tylermw.com/</a></li>
</ul>


</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>rayshader</category>
  <category>ggplot2</category>
  <category>visualizations</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/2021-09-07-rayshader.html</guid>
  <pubDate>Tue, 07 Sep 2021 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-09-07-rayshader/images/smallhobart.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>A Brief History of the Dataframe</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-05-24-dataframe/2021-05-24-dataframe.html</link>
  <description><![CDATA[ 



<p>This is quite the insightful read on the history of the dataframe. From its origins in the S programming language, to R, to the <code>pandas</code> library for Python (to the <code>tibble</code> for R!)… I couldn’t imagine doing my work without this fundamental data structure, but will it really be defined out of existence? See below link for an excellent overview by <a href="https://devin-petersohn.medium.com/">Devin Petersohn</a>:</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-05-24-dataframe/images/dataframe.jpeg" class="img-fluid"></p>
<p>Source:</p>
<ul>
<li><p><a href="https://towardsdatascience.com/preventing-the-death-of-the-dataframe-8bca1c0f83c8">Towards Data Science: Preventing the Death of the Dataframe</a></p></li>
<li><p><a href="https://pandas.pydata.org/">pandas for Python</a></p></li>
<li><p><a href="https://tibble.tidyverse.org/">tibble for R</a></p></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tibble</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-05-24-dataframe/2021-05-24-dataframe.html</guid>
  <pubDate>Mon, 24 May 2021 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-05-24-dataframe/images/dataframe.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>DT: An R Interface to the JavaScript library DataTables</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-05-03-DT/2021-05-03-DT.html</link>
  <description><![CDATA[ 



<p>The <a href="https://rstudio.github.io/DT/">DT package</a> for R is a powerful integration of the JavaScript library <em>DataTables</em>. One of the things that I enjoy with <code>DT</code> is enhancing my Shiny apps by rendering interactive tables with <code>DT</code>. The <code>DT</code> documentation, written by <a href="https://www.rstudio.com/">RStudio PBC</a> and the <code>DT</code> devs, is incredibly well-written and you’ll learn a lot about how you can use these tables in the development of robust R web apps. And the available Options…. Endless in a good way!</p>
<p>If you’re a Shiny dev, check out the live demos sourced below.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-05-03-DT/images/DT_Shiny.png" class="img-fluid"></p>
<p>Source:</p>
<ul>
<li><p><a href="https://github.com/rstudio/DT">DT on GitHub</a></p></li>
<li><p><a href="https://rstudio.github.io/DT/">DT site</a></p></li>
<li><p><a href="https://yihui.shinyapps.io/DT-selection/">Live Shiny demo: DT Selections Ex. 1</a></p></li>
<li><p><a href="https://yihui.shinyapps.io/DT-rows/">Live Shiny demo: DT Selection Ex. 2</a></p></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>dt</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-05-03-DT/2021-05-03-DT.html</guid>
  <pubDate>Mon, 03 May 2021 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-05-03-DT/images/DT_Shiny.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>rstudio::global tips, tricks, and more</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/2021-01-24-rstudio-global.html</link>
  <description><![CDATA[ 



<p>I attended several sessions throughout rstudio::global and below are my favorite reminders, takeaways, and new concepts that I learned. You’ll gain the most from this article if you are comfortable with predictive analytics with R and have been exposed to the <code>tidyverse</code> and <code>tidymodels</code> collections of packages. If you missed the conference, all of the presentations and slides will be made available on RStudio’s website soon. Some philosophical, some technical.<br><br> <img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/global-logo-dark.jpg" class="img-fluid" alt="rstudio::global(2021) conference"></p>
<section id="fostering-positive-thinking" class="level1">
<h1>Fostering Positive Thinking</h1>
<p>The opening keynote presentation with RStudio’s Chief Data Scientist, Hadley Wickham, was super refreshing and very encouraging to hear. In short, Wickham encouraged analysts and data scientists to change the way you approach challenges when programming or maintaining code.</p>
<p>Below are several reminders that Wickham discussed… If you’re your harshest critic, revisit these. I know that I will:</p>
<table class="table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Automatic Thoughts</th>
<th>Balanced Alternatives</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>I must be a moron if I can’t perform this “simple” task.</td>
<td>This isn’t something I do very often so it’s unreasonable to expect that I’d automatically be an expert at it.</td>
</tr>
<tr class="even">
<td>The documentation is useless and doesn’t help me at all.</td>
<td>It’s not possible to document every possible existing situation, but I can still read the docs and learn something.</td>
</tr>
<tr class="odd">
<td>This was a total waste of time. I’ll never get those four hours back again.</td>
<td>Maybe I didn’t succeed in my original goal, but I made some progress, and I gained valuable insights for the next time that I try.</td>
</tr>
</tbody>
</table>
</section>
<section id="tidymodels" class="level1">
<h1>Tidymodels</h1>
<section id="what-is-it" class="level3">
<h3 class="anchored" data-anchor-id="what-is-it">What is it?</h3>
<p>Coming from a converted <code>caret</code>-ista, it wasn’t an easy transition to the full <code>tidymodels</code> framework. I liked the way <code>caret</code> <em>felt</em>, and I did almost everything with it from resampling, modeling, tuning, to model evaluation. Enter <code>tidymodels</code>, a framework that feels like a deconstructed <code>caret</code> - Each major <code>caret</code> feature has been enhanced and wrapped into its own package. I’ve been using this framework for roughly one year and the rate at which this ecosystem has evolved has been impressive.</p>
<p><code>tidymodels</code> is a collection of tidy-friendly packages written with a consistent vocabulary for reproducible machine learning workflows. Its core packages include the following:</p>
<ul>
<li><p><a href="https://rsample.tidymodels.org/">rsample</a>: provides infrastructure for efficient data splitting and resampling</p></li>
<li><p><a href="https://parsnip.tidymodels.org/">parsnip</a>: a tidy, unified interface to models that can be used to try a range of models without getting bogged down in the syntactical minutiae of the underlying packages</p></li>
<li><p><a href="https://recipes.tidymodels.org/">recipes</a>: a tidy interface to data pre-processing tools for feature engineering</p></li>
<li><p><a href="https://workflows.tidymodels.org/">workflows</a>: expands the traditional model-only recipe to a much more holistic blueprint for pre-processing, modeling, post-processing, and evaluation</p></li>
<li><p><a href="https://tune.tidymodels.org/">tune</a>: helps you optimize the hyperparameters of your model and pre-processing steps</p></li>
<li><p><a href="https://yardstick.tidymodels.org/">yardstick</a>: measures the effectiveness of models using performance metrics</p></li>
<li><p><a href="https://broom.tidymodels.org/">broom</a>: converts the information in common statistical R objects into user-friendly, predictable formats</p></li>
<li><p><a href="https://dials.tidymodels.org/">dials</a>: creates and manages tuning parameters and parameter grids</p></li>
<li><p><a href="https://usemodels.tidymodels.org/">usemodels</a>: a helpful way to quickly create code snippets to fit models using the tidymodels framework</p>
<ul>
<li>At the time of writing this, <code>usemodels</code> is still in very early development (version 0.1.0.). This package follows the <code>usethis</code> philosophy of automating repetitive project development tasks but with a focus on modeling. <code>usemodels</code> helped me fully transition from the <code>caret</code> meta-engine to <code>parsnip</code> + <code>tune</code> + <code>dials</code> + more of the <code>tidymodels</code> framework.</li>
</ul></li>
<li><p><a href="https://stacks.tidymodels.org/">stacks</a>: similar to <code>usemodels</code>, this is an early-stage package for model stacking, an ensembling method that takes the outputs of many models and combines them to generate a new model that generates predictions informed by each of its members</p></li>
</ul>
</section>
<section id="irregular-grid-searches" class="level2">
<h2 class="anchored" data-anchor-id="irregular-grid-searches">Irregular Grid Searches</h2>
<p>Irregular grid searches help you tune your models by cycling through randomized hyperparameters in an effort to yield the best (or at least better) performance. I’ve been using the <code>dials</code> package to create Latin hypercubes which is explained below, highlighting the benefits of this space-filling design vs a purely randomized irregular grid search. Max Kuhn’s <em>“New in tidymodels”</em> rstudio::global event provided me with a fresh reminder about <em>why</em> these methods are beneficial and <em>how</em> they actually optimize performance.</p>
<p>The documentation below was copied almost entirely from Chapter 13 of Max Kuhn and Julia Silge’s <a href="https://www.tmwr.org/"><em>Tidy Modeling with R</em></a> (“TMWR”). I’ve deleted certain bits and added minimal helper comments in brackets. If you find yourself statistically programming, bootstrapping / resampling, improving model performance through grid searches, maybe even ensemble stacking, I’d highly recommend that you bookmark the TMWR book.</p>
<section id="random-grid-search" class="level3">
<h3 class="anchored" data-anchor-id="random-grid-search">Random Grid Search</h3>
<p>There a several options for creating non-regular grids. The first is to use random sampling across the range of parameters. The <code>grid_random()</code> function [of the <code>dials</code> package] generates independent uniform random numbers across the parameter ranges. If the parameter object has an associated transformation (such as we have for <code>penalty</code>), the random numbers are generated on the transformed scale. For example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-2">mlp_param <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">grid_random</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">1000</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="co" style="color: #5E5E5E;"># 'size' is the number of combinations</span></span>
<span id="cb1-4">  <span class="fu" style="color: #4758AB;">summary</span>()</span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#&gt;   hidden_units      penalty           epochs    </span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">#&gt;  Min.   : 1.00   Min.   :0.0000   Min.   :  10  </span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#&gt;  1st Qu.: 3.00   1st Qu.:0.0000   1st Qu.: 259  </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#&gt;  Median : 6.00   Median :0.0000   Median : 480  </span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">#&gt;  Mean   : 5.58   Mean   :0.0432   Mean   : 496  </span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#&gt;  3rd Qu.: 8.00   3rd Qu.:0.0050   3rd Qu.: 738  </span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">#&gt;  Max.   :10.00   Max.   :0.9932   Max.   :1000</span></span></code></pre></div>
</div>
<p>For <code>penalty</code>, the random numbers are uniform on the log (base 10) scale but the values in the grid are in the natural units.</p>
<p>The issue with random grids is that, with small-to-medium grids, random values can result in overlapping parameter combinations. Also, the random grid needs to cover the whole parameter space but the likelihood of good coverage increases with the number of grid values. Even for a sample of 15 candidate points, this plot shows some overlap between points for our example multilayer perceptron:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(ggforce)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb2-3">mlp_param <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-4">  <span class="co" style="color: #5E5E5E;"># The 'original = FALSE' option keeps penalty in log10 units</span></span>
<span id="cb2-5">  <span class="fu" style="color: #4758AB;">grid_random</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">original =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-6">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .panel_x, <span class="at" style="color: #657422;">y =</span> .panel_y)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-8">  <span class="fu" style="color: #4758AB;">geom_blank</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb2-9">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(<span class="fu" style="color: #4758AB;">vars</span>(hidden_units, penalty, epochs), <span class="at" style="color: #657422;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Random design with 15 candidates"</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/grid-random-matrix-1.svg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Random grid search using dials::grid_random()</figcaption><p></p>
</figure>
</div>
</section>
<section id="space-filling-designs" class="level3">
<h3 class="anchored" data-anchor-id="space-filling-designs">Space-Filling Designs</h3>
<p>A much better approach is to use a set of experimental designs called space-filling designs. While different design methods have slightly different goals, they generally find a configuration of points that cover the parameter space with the smallest chance of overlapping or redundant values. See <a href="https://www.asc.ohio-state.edu/santner.1/TJS-BJW-WIN/master-driver.pdf">Santner et al.&nbsp;(2003)</a> for an overview of space-filling designs.</p>
<p>The <code>dials</code> package contains functions for Latin hypercube and maximum entropy designs. As with <code>dials::grid_random()</code>, the primary inputs are the number of parameter combinations and a parameter object. Let’s compare the above random design with a Latin hypercube design for 15 candidate parameter values.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb3-2">mlp_param <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">grid_latin_hypercube</span>(<span class="at" style="color: #657422;">size =</span> <span class="dv" style="color: #AD0000;">15</span>, <span class="at" style="color: #657422;">original =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">ggplot</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> .panel_x, <span class="at" style="color: #657422;">y =</span> .panel_y)) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;">geom_point</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">geom_blank</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">facet_matrix</span>(<span class="fu" style="color: #4758AB;">vars</span>(hidden_units, penalty, epochs), <span class="at" style="color: #657422;">layer.diag =</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="sc" style="color: #5E5E5E;">+</span> </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title =</span> <span class="st" style="color: #20794D;">"Latin Hypercube design with 15 candidates"</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/grid-sfd-compare-1.svg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Latin hypercube designed using the dials::grid_latin_hypercube() helper</figcaption><p></p>
</figure>
</div>
<p>While not perfect, this design spaces the points further away from one another.</p>
<p>Space-filling designs can be very effective at representing the parameter space. The default design used by the <code>tune</code> package is the maximum entropy design. These tend to produce grids that cover the candidate space well and drastically increase the chances of finding good results.</p>
<p>To learn more about advanced <em>iterative search</em> methods such as Bayesian optimization and simulated annealing, please visit <a href="https://www.tmwr.org/iterative-search.html">Chapter 14 of TMWR</a>. Max Kuhn covered these advanced techniques during his <code>tidymodels</code> rstudio::global event and I haven’t had a chance to try these iterative search methods.</p>
</section>
</section>
<section id="usemodels" class="level2">
<h2 class="anchored" data-anchor-id="usemodels">usemodels</h2>
<p>In the spirit of sharing useful tips, tricks, and packages, I’d like to introduce you to Max Kuhn’s <code>usemodels</code> package. If you’re on the fence about adopting the <code>tidymodels</code> framework, this package is definitely for you. Even for experienced users, <code>usemodels</code> is an excellent way to quickly generate boilerplate code snippets that are algorithm-specific. This package is not yet on CRAN, so install it using the following:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;"># Installing usemodels from its GitHub repo</span></span>
<span id="cb4-2">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"tidymodels/usemodels"</span>)</span></code></pre></div>
</div>
<p>Given a simple formula and a data set, the <code>use_*</code> functions can create code that is appropriate for the data (given the model). [Note: The model formula will be in the form of <code>y ~ a + b + c</code> or <code>y ~ .</code> if you plan on including all available variables in your model.]</p>
<p>For example, using the <code>palmerpenguins</code> data with a <code>glmnet</code> model:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(usemodels)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">library</span>(palmerpenguins)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">data</span>(penguins)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">use_glmnet</span>(body_mass_g <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> penguins)</span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;"># </span><span class="al" style="color: #AD0000;">NOTE</span><span class="co" style="color: #5E5E5E;">: The below will be printed in your console with your model recipe and tailored</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;"># with the required pre-processing steps given your algorithm of choice (in this case,</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;"># glmnet). The `usemodels` output also provides the code structure for a reproducible </span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;"># workflow, made possible with the `workflows` package. Should you choose to tune</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;"># your model, `usemodels` also provides code snippets for producing a grid of parameter</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;"># combinations to use with your hyperparameter tuning grid search.</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">glmnet_recipe <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb5-14">  <span class="fu" style="color: #4758AB;">recipe</span>(<span class="at" style="color: #657422;">formula =</span> body_mass_g <span class="sc" style="color: #5E5E5E;">~</span> ., <span class="at" style="color: #657422;">data =</span> penguins) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;">step_novel</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;">step_dummy</span>(<span class="fu" style="color: #4758AB;">all_nominal</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_outcomes</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-17">  <span class="fu" style="color: #4758AB;">step_zv</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-18">  <span class="fu" style="color: #4758AB;">step_normalize</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>(), <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">all_nominal</span>()) </span>
<span id="cb5-19"></span>
<span id="cb5-20">glmnet_spec <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb5-21">  <span class="fu" style="color: #4758AB;">linear_reg</span>(<span class="at" style="color: #657422;">penalty =</span> <span class="fu" style="color: #4758AB;">tune</span>(), <span class="at" style="color: #657422;">mixture =</span> <span class="fu" style="color: #4758AB;">tune</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-22">  <span class="fu" style="color: #4758AB;">set_mode</span>(<span class="st" style="color: #20794D;">"regression"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-23">  <span class="fu" style="color: #4758AB;">set_engine</span>(<span class="st" style="color: #20794D;">"glmnet"</span>) </span>
<span id="cb5-24"></span>
<span id="cb5-25">glmnet_workflow <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb5-26">  <span class="fu" style="color: #4758AB;">workflow</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-27">  <span class="fu" style="color: #4758AB;">add_recipe</span>(glmnet_recipe) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-28">  <span class="fu" style="color: #4758AB;">add_model</span>(glmnet_spec) </span>
<span id="cb5-29"></span>
<span id="cb5-30">glmnet_grid <span class="ot" style="color: #003B4F;">&lt;-</span> tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">crossing</span>(<span class="at" style="color: #657422;">penalty =</span> <span class="dv" style="color: #AD0000;">10</span><span class="sc" style="color: #5E5E5E;">^</span><span class="fu" style="color: #4758AB;">seq</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">6</span>, <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">length.out =</span> <span class="dv" style="color: #AD0000;">20</span>), <span class="at" style="color: #657422;">mixture =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.05</span>, </span>
<span id="cb5-31">    <span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.4</span>, <span class="fl" style="color: #AD0000;">0.6</span>, <span class="fl" style="color: #AD0000;">0.8</span>, <span class="dv" style="color: #AD0000;">1</span>)) </span>
<span id="cb5-32"></span>
<span id="cb5-33">glmnet_tune <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb5-34">  <span class="fu" style="color: #4758AB;">tune_grid</span>(glmnet_workflow, <span class="at" style="color: #657422;">resamples =</span> <span class="fu" style="color: #4758AB;">stop</span>(<span class="st" style="color: #20794D;">"add your rsample object"</span>), <span class="at" style="color: #657422;">grid =</span> glmnet_grid)</span></code></pre></div>
</div>
<p>As of today’s date, this package includes templates available with the following code: <code>use_cubist</code>, <code>use_earth</code>, <code>use_glmnet</code>, <code>use_kknn</code>, <code>use_ranger</code>, and <code>use_xgboost</code></p>
</section>
<section id="stacks" class="level2">
<h2 class="anchored" data-anchor-id="stacks">stacks</h2>
<section id="ensemble-models" class="level3">
<h3 class="anchored" data-anchor-id="ensemble-models">Ensemble Models</h3>
<p>Similar to <code>usemodels</code>, this is a very early-stage package that you should start following. There are already several AI tools for producing “model stacks” or “ensemble models” such as <a href="http://h2o-release.s3.amazonaws.com/h2o/master/1735/docs-website/Ruser/Rinstall.html">H2O.ai</a>, <a href="https://community.datarobot.com/t5/resources/welcome-to-using-r-with-datarobot/ta-p/1770">DataRobot</a>, and a few others, however, <code>stacks</code> is the first purpose-built for use with <code>tidymodels</code>. The following narrative is copied almost directly from the <a href="https://stacks.tidymodels.org/">stacks website</a>.</p>
<p><code>stacks</code> is an R package for model stacking that aligns with the <code>tidymodels</code>. Model stacking is an ensembling method that takes the outputs of many models and combines them to generate a new model - <em>referred to as an ensemble in this package</em> - that generates predictions informed by each of its members.</p>
<p>The process goes something like this:</p>
<ol type="1">
<li><p>Define candidate ensemble members using functionality from rsample, parsnip, workflows, recipes, and tune</p></li>
<li><p>Initialize a data_stack object with stacks()</p></li>
<li><p>Iteratively add candidate ensemble members to the data_stack with add_candidates()</p></li>
<li><p>Evaluate how to combine their predictions with blend_predictions()</p></li>
<li><p>Fit candidate ensemble members with non-zero stacking coefficients with fit_members()</p></li>
<li><p>Predict on new data with predict()</p></li>
</ol>
</section>
<section id="stacks-grammar" class="level3">
<h3 class="anchored" data-anchor-id="stacks-grammar">stacks Grammar</h3>
<p>At the highest level, ensembles are formed from model definitions. In this package, model definitions are an instance of a minimal workflow, containing a model specification (as defined in the parsnip package) and, optionally, a preprocessor (as defined in the recipes package). Model definitions specify the form of candidate ensemble members.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/model_defs.png" class="img-fluid"></p>
<p>To be used in the same ensemble, each of these model definitions must share the same resample. This rsample rset object, when paired with the model definitions, can be used to generate the tuning/fitting results objects for the candidate ensemble members with tune.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/candidates.png" class="img-fluid"></p>
<p>Candidate members first come together in a data_stack object through the add_candidates() function. Principally, these objects are just tibbles, where the first column gives the true outcome in the assessment set (the portion of the training set used for model validation), and the remaining columns give the predictions from each candidate ensemble member. (When the outcome is numeric, there’s only one column per candidate ensemble member. Classification requires as many columns per candidate as there are levels in the outcome variable.) They also bring along a few extra attributes to keep track of model definitions.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/data_stack.png" class="img-fluid"></p>
<p>Then, the data stack can be evaluated using blend_predictions() to determine to how best to combine the outputs from each of the candidate members. In the stacking literature, this process is commonly called meta-learning.</p>
<p>The outputs of each member are likely highly correlated. Thus, depending on the degree of regularization you choose, the coefficients for the inputs of (possibly) many of the members will zero out—their predictions will have no influence on the final output, and those terms will thus be thrown out.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/coefs.png" class="img-fluid"></p>
<p>These stacking coefficients determine which candidate ensemble members will become ensemble members. Candidates with non-zero stacking coefficients are then fitted on the whole training set, altogether making up a <code>model_stack</code> object.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/class_model_stack.png" class="img-fluid"></p>
<p>This model stack object, outputted from <code>fit_members()</code>, is ready to predict on new data! The trained ensemble members are often referred to as base models in the stacking literature. To learn more about how to use <code>stacks</code>, check out the following excellent vignettes from the <code>tidymodels</code> team:</p>
<ul>
<li><p><a href="https://stacks.tidymodels.org/articles/basics.html">Getting Started with stacks</a></p></li>
<li><p><a href="https://stacks.tidymodels.org/articles/classification.html">Classification Models with stacks</a></p></li>
</ul>
<p>Sources:</p>
<ul>
<li><p><a href="https://rstudio.com/conference/">rstudio::global(2021)</a></p></li>
<li><p><a href="https://www.tmwr.org/">Tidy Modeling with R</a></p></li>
<li><p><a href="https://www.tidymodels.org/">tidymodels</a></p></li>
<li><p><a href="https://usemodels.tidymodels.org/">usemodels</a></p></li>
<li><p><a href="https://stacks.tidymodels.org/">stacks</a></p></li>
</ul>


</section>
</section>
</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidymodels</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/2021-01-24-rstudio-global.html</guid>
  <pubDate>Sun, 24 Jan 2021 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-01-24-rstudio-global/images/rstudio-global-2021.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>rsthemes: Customizing your RStudio IDE</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2021-01-19-rsthemes/2021-01-19-rsthemes.html</link>
  <description><![CDATA[ 



<p>Feel like freshening up your RStudio IDE? Check out the <code>rsthemes</code> package by <a href="https://www.linkedin.com/in/garrick-aden-buie/">Garrick Aden-Buie</a> to explore and apply different themes. For the last year or so, I’ve been enjoying the “base16 Ashes” theme at work and home. I prefer the “One Dark” theme on Atom / Juno for my Julia setup, But I’m starting to feel like I should use “One Dark” across the board. 🤓</p>
<p>This package is not yet on CRAN, so you’ll have to install via <code>devtools::install_github()</code>. See installation and usage code below, pulled from the <code>rsthemes</code> GitHub:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## INSTALLATION</span></span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;"># Instructions assume devtools is installed)</span></span>
<span id="cb1-3">devtools<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_github</span>(<span class="st" style="color: #20794D;">"gadenbuie/rsthemes"</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;"># Install custom themes + additional set of base16-based themes</span></span>
<span id="cb1-6">rsthemes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">install_rsthemes</span>(<span class="at" style="color: #657422;">include_base16 =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">## USAGE</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># list installed themes</span></span>
<span id="cb1-10">rsthemes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">list_rsthemes</span>()</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;"># Try all themes</span></span>
<span id="cb1-13">rsthemes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">try_rsthemes</span>()</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># Try just the light, dark, or base16 themes, e.g.</span></span>
<span id="cb1-16">rsthemes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">try_rsthemes</span>(<span class="st" style="color: #20794D;">"light"</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># Use a theme</span></span>
<span id="cb1-19">rstudioapi<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">applyTheme</span>(<span class="st" style="color: #20794D;">"One Dark {rsthemes}"</span>)</span></code></pre></div>
</div>
<p>Source:</p>
<ul>
<li><p><a href="https://github.com/gadenbuie/rsthemes">rsthemes on GitHub</a></p></li>
<li><p><a href="http://chriskempson.com/projects/base16/">base16 themes</a></p></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>quick tips</category>
  <guid>https://www.javierorracadeatcu.com/posts/2021-01-19-rsthemes/2021-01-19-rsthemes.html</guid>
  <pubDate>Tue, 19 Jan 2021 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2021-01-19-rsthemes/images/rsthemes.gif" medium="image" type="image/gif"/>
</item>
<item>
  <title>Preparing for 2021 Goals with a Raspberry Pi</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/2020-12-31-Raspberry-Pi.html</link>
  <description><![CDATA[ 



<p>Killing a few birds with one stone and getting ready for 2021… <br><br>1) Getting better at Linux / shell commands, <br> 2) Learning Julia (see my Resources tab for some great Julia starter links!), <br> 3) Doing it all on a Raspberry Pi 😜 Happy holidays and Happy New Years to all!</p>
<p>Below are some pics of my current progress.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/images/Pi1.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Raspberry Pi 4, Model B, 8GB RAM, &amp; Super Cute Tiny Heat Sinks</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/images/Pi2.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Enclosing the Pi 4 in a CanaKit case + fan</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/images/Pi3.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Raspberry Pi OS, a Debian distro for the Pi</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/images/Pi4.jpeg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Jupyter Lab server on the Pi set up w/ Python, R, and Julia</figcaption><p></p>
</figure>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>linux</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/2020-12-31-Raspberry-Pi.html</guid>
  <pubDate>Thu, 31 Dec 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-12-31-Raspberry-Pi/images/Pi-banner.png" medium="image" type="image/png" height="76" width="144"/>
</item>
<item>
  <title>One-Hour R Package Development Tutorial by Shannon Pileggi, PhD</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-12-19-R-Package-One-Hour-Tutorial/2020-12-19-R-Package-One-Hour-Tutorial.html</link>
  <description><![CDATA[ 



<p>Package development should be on every R programmer’s radar in 2021, especially with all the free information available online! Here’s an excellent, concise, ultra-bookmark-worthy tutorial by Shannon Pileggi, PhD, titled “Your first R package in 1 hour”. Folks, she wasn’t lying either. I followed her tutorial and built an R package in roughly 45 minutes (note: I assume you have experience with the R language and understand the basics of <code>devtools</code>, <code>usethis</code>, <code>roxygen2</code>, and <code>rmarkdown</code>).</p>
<p>Using functions from just the <code>devtools</code> and <code>usethis</code> packages, the whole process is much more streamlined than what I would have thought. Check out the rest of Shannon’s <em>Piping Hot Data</em> website as well… It’s a great resource for R programmers and researchers, and she built it with the newly reintroduced <code>distill</code> package, just like this site. :-)</p>
<p>Source: <br>* Shannon’s <em>Piping Hot Data</em> <a href="https://www.pipinghotdata.com/posts/2020-10-25-your-first-r-package-in-1-hour/">“Your first R package in 1 hour” post</a> <br>* Shannon’s <a href="https://www.linkedin.com/in/shannon-m-pileggi/">LinkedIn</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>packages</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-12-19-R-Package-One-Hour-Tutorial/2020-12-19-R-Package-One-Hour-Tutorial.html</guid>
  <pubDate>Sat, 19 Dec 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-12-19-R-Package-One-Hour-Tutorial/images/package_workshop.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>What’s New in dbplyr 2.0.0</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-11-04-dbplyr-2.0.0/2020-11-04-dbplyr-2.0.0.html</link>
  <description><![CDATA[ 



<p><code>dbplyr</code> 2.0.0 comes loaded with improvements including the translation of <code>dplyr</code>’s new <code>across()</code> function. If you aren’t familiar with this library, <code>dbplyr</code> translates your <code>dplyr</code> syntax to SQL. I regularly connect to enterprise databases using R and have almost completely transitioned from SQL. Yes, SQL is awesome. Yes, using <code>dplyr</code> is a lot more fun!</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2020-11-04-dbplyr-2.0.0/images/dbplyr.jpeg" class="img-fluid"></p>
<p>Source:<br> * tidyverse blog’s <a href="https://www.tidyverse.org/blog/2020/11/dbplyr-2-0-0/">dbplyr 2.0.0 Official Announcement</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidyverse</category>
  <category>dplyr</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-11-04-dbplyr-2.0.0/2020-11-04-dbplyr-2.0.0.html</guid>
  <pubDate>Wed, 04 Nov 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-11-04-dbplyr-2.0.0/images/dbplyr_what_is_new.jpg_large" medium="image"/>
</item>
<item>
  <title>Detailed R Package Development Tutorial from Method Bites</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-09-13-R-Package-Detailed-Tutorial/2020-09-13-R-Package-Detailed-Tutorial.html</link>
  <description><![CDATA[ 



<p>I’ll keep this short since all credit should go towards the amazing Cosima Meyer and Dennis Hammerschmidton… They compressed some of the most valuable steps for creating and deploying a package. This duo’s work was published for the MZES Social Science Data Lab. If you want a detailed and easy-to-follow how-to for R package development, bookmark this step-by-step guide!</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2020-09-13-R-Package-Detailed-Tutorial/images/package_dev.png" class="img-fluid"></p>
<p>Source:<br> * Methods Bites: <a href="https://www.mzes.uni-mannheim.de/socialsciencedatalab/article/r-package/">How to write your own R package and publish it on CRAN</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>packages</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-09-13-R-Package-Detailed-Tutorial/2020-09-13-R-Package-Detailed-Tutorial.html</guid>
  <pubDate>Sun, 13 Sep 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-09-13-R-Package-Detailed-Tutorial/images/methods_bites.png" medium="image" type="image/png" height="167" width="144"/>
</item>
<item>
  <title>Shiny Voice-Activated input</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-07-03-Shiny-Voice-Input/2020-07-03-Shiny-Voice-Input.html</link>
  <description><![CDATA[ 



<p>Hey R Shiny users, want to make your Shiny apps voice-interactive? For example, “Click on Product Toy-2A and then drill-down by Region.” Ummm, yes please. Pretty neat stuff made possible with the <code>heyshiny</code> package. “The <code>heyshiny</code> package provides a new Shiny input, the <code>speechInput()</code>. This new input allows your Shiny app to listen to the microphone, recognize the speech, and return it as text.”</p>
<p>The main caveat with this package is that it is based on the annyang JavaScript library and therefore requires that 1) you’re online and 2) using a browser that supports speech recognition (I tried this on Chrome and works fine). It’s not on CRAN but check out the GitHub page, below. Here’s an example if you’re getting set up, pulled from their GitHub repo:</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2020-07-03-Shiny-Voice-Input/images/heyshiny_code.png" class="img-fluid"></p>
<p>Source:<br> * <a href="https://github.com/jcrodriguez1989/heyshiny">heyshiny on GitHub</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>shiny</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-07-03-Shiny-Voice-Input/2020-07-03-Shiny-Voice-Input.html</guid>
  <pubDate>Fri, 03 Jul 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-07-03-Shiny-Voice-Input/images/shiny_logo.png" medium="image" type="image/png" height="69" width="144"/>
</item>
<item>
  <title>Testing dplyr 1.0.0</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-06-20-dplyr-1.0.0/2020-06-20-dplyr-1.0.0.html</link>
  <description><![CDATA[ 



<p>I had read about the new <code>across()</code> function hype and now I get it… No more <code>mutate_at()</code> or <code>summarise_at()</code> with the cryptic list-lambdas. As the dplyr documentation states, “<code>across()</code> supersedes the family of”scoped variants” like <code>summarise_at()</code>, <code>summarise_if()</code>, and <code>summarise_all()</code>.”</p>
<p>Below is an example highlighting the new <code>across()</code> syntax meant to be used within a <code>mutate()</code> function. I tried this on a few columns of the mtcars data set with dplyr’s <code>case_when()</code> a la SQL CASE_WHEN (as opposed to nesting multiple <code>if_else()</code> statements to the point of confusion!). The dplyr changes are subtle but will definitely streamline my data wrangling.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-06-20-dplyr-1.0.0/images/dplyr_1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">dplyr 1.0.0’s new across() function</figcaption><p></p>
</figure>
</div>
<p>Source:<br> * <a href="https://dplyr.tidyverse.org/">dplyr, a core tidyverse package</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidyverse</category>
  <category>dplyr</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-06-20-dplyr-1.0.0/2020-06-20-dplyr-1.0.0.html</guid>
  <pubDate>Sat, 20 Jun 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-06-20-dplyr-1.0.0/images/dplyr.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Lying with Statistics</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/2020-04-19-Police-Killings.html</link>
  <description><![CDATA[ 



<p>Lets explore four plots and see how we can #LieWithStatistics…</p>
<p><strong>Plot 1</strong>: Police killings by date, by race <br>General observation: Police kill more white people than black people<br><br> <img src="https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/images/Police_Killings_1.jpeg" class="img-fluid" alt="Police Killings, Plot 1, made with R’s ggplot2"></p>
<p><strong>Plot 2</strong>: Police killing boxplot showing murder rates, by race, by police department <br><strong>General explanation and takeaway</strong>: The dots on each boxplot show the statistical outliers, box plot lines extend out to the “min” and “max”, and the box lines (from bottom to top of each box) represent the first quartile (25th percentile), median (50th percentile), and third quartile (75th percentile)<br><br> <img src="https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/images/Police_Killings_2.jpeg" class="img-fluid" alt="Police Killings, Plot 2, made with R’s ggplot2"></p>
<p><strong>Plot 3</strong>: Police killing boxplot, now log-transforming the murder rates to more easily identify statistical differences, by race <br><strong>General explanation and takeaway</strong>: Log-transforming data points for visualization or modeling purposes is a technique by which you can <em>smooth</em> observed data making it more robust (or resistant) to outliers. I effectively re-wrote the murder rates to show exponential relativity. <br><strong>Important caveat</strong>: Are Native Americans more likely to die by police than other races? Sure looks like it… <em>but see Plot 4 for more thoughts</em><br><br> <img src="https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/images/Police_Killings_3.jpeg" class="img-fluid" alt="Police Killings, Plot 3, made with R’s ggplot2"></p>
<p><strong>Plot 4</strong>: Police killing boxplot, now log-transforming the murder rates using a log base 10 (easier interpretability) and “fixing” the Native American data points causing a misleading assumption in Plot 3, i.e., Native American death rates appeared much higher than others in Plot 3 given the fact that log(0) = 1. <br><strong>General takeaway</strong>: There were such few Native American data points that log-transforming all of the zeroes was unintentionally bastardizing the analysis. It would appear black people are almost an order of magnitude more likely to be killed by police than white people.<br><br> <img src="https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/images/Police_Killings_3_modified.png" class="img-fluid" alt="Police Killings, Plot 4, made with R’s ggplot2"></p>
<p>I do not seek to answer questions of “why” systemic injustice exists in the US, but I wanted to analyze police killing data and share these dialectical investigations.</p>
<p>Source:<br> * <a href="https://mappingpoliceviolence.org/">Samuel Sinyangwe &amp; the Mapping Police Violence team</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>statistics</category>
  <category>ggplot2</category>
  <category>visualizations</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/2020-04-19-Police-Killings.html</guid>
  <pubDate>Sun, 19 Apr 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-04-19-Police-Killings/images/Police_Killings_1.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>D&amp;D Adventures + blogdown</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-04-05-DnD-Adventures/2020-04-05-DnD-Adventures.html</link>
  <description><![CDATA[ 



<p>Wizards of the Coast have developed such an incredible tabletop, fantasy, RPG with the 5th edition of D&amp;D… I wish I would have re-discovered this game years back. For context, I haven’t touched D&amp;D since 1997!</p>
<p>If you know of good resources for newbies and new D&amp;D Dungeon Masters (“DMs”), I’d love to know about your favorite resources. For data science folks out there, this site was built with R using <code>blogdown</code>, Hugo themes, and deployed for free using GitHub and Netlify.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-04-05-DnD-Adventures/images/Dnd.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">D&amp;D dragon looking for trouble</figcaption><p></p>
</figure>
</div>
<p>Reference: <br> * Javier’s <a href="https://flamboyant-brahmagupta-3caca6.netlify.app/">D&amp;D Adventures</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>rmarkdown</category>
  <category>blogdown</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-04-05-DnD-Adventures/2020-04-05-DnD-Adventures.html</guid>
  <pubDate>Sun, 05 Apr 2020 07:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-04-05-DnD-Adventures/images/Dnd.png" medium="image" type="image/png" height="61" width="144"/>
</item>
<item>
  <title>themis: Extra Steps for tidymodels + recipes</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-02-20-Themis/2020-02-20-Themis.html</link>
  <description><![CDATA[ 



<p>Working with unbalanced data sets? Remember that accuracy, alone, is not the best performance metric (especially when dealing with unbalanced data). Instead, place more importance on Cohen’s kappa coefficient, F1 harmonic mean, or focus on improving your model’s specificity or sensitivity, etc.</p>
<p>I’ve been transitioning a lot of my workflows to the tidymodels framework and I am super excited about the future of tidymodels (recipes + parsnip + dials + tune + workflow + more 😭✊🙌). If you’re using recipes often like me, a new library called {themis}, by <a href="https://www.hvitfeldt.me/">Emil Hvitfeldt</a> expands the {recipes} pre-processing steps for working with unbalanced data sets (it adds functionality for under- and hybrid-sampling techniques). I love me some smote, and now I can incorporate this sampling technique into my recipes with <code>themis::step_smote()</code>!</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># Installation</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">install.packages</span>(<span class="st" style="color: #20794D;">"themis"</span>)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># Example workflow</span></span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(recipes)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(modeldata)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;">library</span>(themis)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">data</span>(okc)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">table</span>(okc<span class="sc" style="color: #5E5E5E;">$</span>Class, <span class="at" style="color: #657422;">useNA =</span> <span class="st" style="color: #20794D;">"always"</span>))</span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;">#&gt;  &lt;NA&gt;  stem other </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;">#&gt;     0  9539 50316</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">ds_rec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">recipe</span>(Class <span class="sc" style="color: #5E5E5E;">~</span> age <span class="sc" style="color: #5E5E5E;">+</span> height, <span class="at" style="color: #657422;">data =</span> okc) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-17">  <span class="fu" style="color: #4758AB;">step_meanimpute</span>(<span class="fu" style="color: #4758AB;">all_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;">step_smote</span>(Class) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;">prep</span>()</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="fu" style="color: #4758AB;">sort</span>(<span class="fu" style="color: #4758AB;">table</span>(<span class="fu" style="color: #4758AB;">bake</span>(ds_rec, <span class="at" style="color: #657422;">new_data =</span> <span class="cn" style="color: #8f5902;">NULL</span>)<span class="sc" style="color: #5E5E5E;">$</span>Class, <span class="at" style="color: #657422;">useNA =</span> <span class="st" style="color: #20794D;">"always"</span>))</span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;">#&gt;  &lt;NA&gt;  stem other </span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;">#&gt;     0 50316 50316</span></span></code></pre></div>
<p>Source:<br> * <a href="https://themis.tidymodels.org/">themis</a><br> * <a href="https://github.com/tidymodels/themis">themis on GitHub</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>tidymodels</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-02-20-Themis/2020-02-20-Themis.html</guid>
  <pubDate>Thu, 20 Feb 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-02-20-Themis/images/themis.png" medium="image" type="image/png" height="126" width="144"/>
</item>
<item>
  <title>Copy R Objects to Clipboard</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-02-08-R-write-table/2020-02-08-R-write-table.html</link>
  <description><![CDATA[ 



<p>You learn something new every day, even basics! For R users on Windows (I’m assuming the same holds true for Mac and Linux users), do you ever find yourself needing to quickly export a dataframe or tibble to Excel or a text editor? I recently discovered base R’s <code>write.table</code> function and have used it much more often than I anticipated.</p>
<p>See below syntax as an example:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.javierorracadeatcu.com/posts/2020-02-08-R-write-table/images/carbon.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">base R’s write.table</figcaption><p></p>
</figure>
</div>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>quick tips</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-02-08-R-write-table/2020-02-08-R-write-table.html</guid>
  <pubDate>Sat, 08 Feb 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-02-08-R-write-table/images/carbon.png" medium="image" type="image/png" height="105" width="144"/>
</item>
<item>
  <title>Hadley Wickham on SuperDataScience Podcast</title>
  <dc:creator>Javier Orraca-Deatcu</dc:creator>
  <link>https://www.javierorracadeatcu.com/posts/2020-02-04-Hadley-Wickham-on-SDS-Podcast/2020-02-04-Hadley-Wickham-on-SDS-Podcast.html</link>
  <description><![CDATA[ 



<p>Hands down, he was the inspiration for me starting my own podcast and I still listen to SDS weekly. Being a massive fan of RStudio, I’m super excited about this most recent SDS episode featuring Hadley Wickham, RStudio’s Chief Data Scientist and creator of ggplot2, dplyr, author, professor… he’s a research and data science genius!.</p>
<p>This episode is a great listen as he explores RStudio Python and R integration and the future of data science.</p>
<p><img src="https://www.javierorracadeatcu.com/posts/2020-02-04-Hadley-Wickham-on-SDS-Podcast/images/SDS_Wickham.jpg" class="img-fluid"></p>
<p>Source:</p>
<ul>
<li>SuperDataScience ep.337 with <a href="https://www.superdatascience.com/podcast/hadley-wickham-talks-integration-and-future-of-python-and-r">Hadley Wickham</a></li>
</ul>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents"><h2 class="anchored quarto-appendix-heading">Reuse</h2><div quarto-reuse="quarto-reuse" class="quarto-appendix-contents"><a rel="license" href="https://creativecommons.org/licenses/by/4.0/">https://creativecommons.org/licenses/by/4.0/</a></div></section></div> ]]></description>
  <category>podcast</category>
  <guid>https://www.javierorracadeatcu.com/posts/2020-02-04-Hadley-Wickham-on-SDS-Podcast/2020-02-04-Hadley-Wickham-on-SDS-Podcast.html</guid>
  <pubDate>Tue, 04 Feb 2020 08:00:00 GMT</pubDate>
  <media:content url="https://www.javierorracadeatcu.com/posts/2020-02-04-Hadley-Wickham-on-SDS-Podcast/images/SDS_Wickham.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
