@top Script { expression+ }

@skip { space | Comment }

@precedence {
  else @right,
  assign @right,
  call @right,
  break @left,
  next @left,
  exp @left,
  times @left,
  matrix @left,
  plus @left,
  rel @left,
  or @left,
  and @left
}

expression[@isGroup=Expression] {
  simpleExpression | compoundExpression
}

simpleExpression {
  Identifier | constant | specialConstant
}

compoundExpression {
  FunctionDeclaration { kw<"function"> ParamList Block } |
  FunctionCall |
  IfStatement { kw<"if"> "(" expression ")" Block (kw<"else"> Block)? } |
  RepeatStatement { kw<"repeat"> Block } |
  WhileStatement { kw<"while"> "(" expression ")" Block } |
  ForStatement { kw<"for"> "(" expression kw<"in"> expression ")" Block } |
  IndexStatement |
  VariableAssignment { Assignable !assign AssignmentOperator expression } |
  BinaryStatement {
    expression !exp ArithOp<"^"> expression |
    expression !times ArithOp<"*" | "/" | "%%"> expression |
    expression !plus ArithOp<"+" | "-"> expression |
    expression !rel (CompareOp<"==" | "!=" | ">=" | "<=" | "%in%">) expression |
    expression !matrix MatrixOp<"%/%" | "%*%" | "%o%" | "%x%"> expression |
    expression !or LogicOp<"|" | "||"> expression |
    expression !and LogicOp<"&" | "&&"> expression
  }
}

commaSep<x> { "" | x ("," x)* }

kw<term> { @specialize[@name={term}]<Identifier, term> }

FunctionCall { expression !call ArgList | String !call ArgList }

ArgList { "(" commaSep<expression> ")" }

ParamList { "(" commaSep<Identifier | kw<"..."> | Identifier "=" expression> ")" }

ReturnStatement {
  kw<"return"> "(" expression? ")"
}

Block {
  "{" (expression | ReturnStatement | BreakStatement | NextStatement)* "}"
}

Assignable { (Identifier | IndexStatement | FunctionCall) }

IndexStatement { expression "[" commaSep<expression> "]" | expression "[[" commaSep<expression> "]]" | expression "$" (Identifier | "\"" Identifier "\"") }

BreakStatement { !break kw<"break"> | kw<"break"> "(" ")" }

NextStatement { !next kw<"next"> | kw<"next"> "(" ")" }

constant[@isGroup=Constant] {
  Integer | logical | Numeric | String | Complex
}

logical[@isGroup=Logical] {
  True | False
}

specialConstant[@isGroup=SpecialConstant] {
  Null | NA | Inf | NaN
}

ArithOp<expr> { expr }

CompareOp<expr> { expr }

MatrixOp<expr> { expr }

LogicOp<expr> { expr }

AssignmentOperator { "=" | "<-" | "->" | "<<-" | "->>" }

True { kw<"TRUE"> | kw<"T"> }

False { kw<"FALSE"> | kw<"F"> }

Null { kw<"NULL"> }

NA { kw<"NA"> }

Inf { kw<"Inf"> }

NaN { kw<"NaN"> }

@tokens {
  Comment { "#" ![\n]* }
  space { @whitespace+ }
  Identifier {
    @asciiLetter+ |
    (@asciiLetter | "_")+ ( @asciiLetter | @digit | "." | "_")* |
    "." ( @asciiLetter | "_")? ( @asciiLetter | @digit | "." | "_")* |
    ".." ![0-9] ( @asciiLetter | @digit | "." | "_")* |
    "..." ( @asciiLetter | @digit | "." | "_")+ |
    "`" ![`]+ "`"
  }
  Integer {
    @digit+ "."? "L" |
    "0" $[xX] $[0-9a-fA-F]+ "L" |
    @digit+ (("e" | "E") ("+" | "-")? @digit+)? "L"
  }
  Numeric {
    @digit |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+
  }
  Complex {
    @digit "i" |
    @digit+ "."? @digit* (("e" | "E") ("+" | "-")? @digit+)? "i" |
    @digit* "." @digit+ (("e" | "E") ("+" | "-")? @digit+)? "i" |
    "0" $[xX] $[0-9a-fA-F]* ("." $[0-9a-fA-F]*)? $[pP] ("+" | "-")? @digit+ "i"
  }
  @precedence { Integer, Complex, Numeric }
  @precedence { Complex, Numeric, Identifier }
  String {
    '"' (![\\\n"] | "\\" _)* '"'? |
    "'" (![\\\n'] | "\\" _)* "'"?
  }
}

@external propSource rHighlight from "./highlight"

@detectDelim
